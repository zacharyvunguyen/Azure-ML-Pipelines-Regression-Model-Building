{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Copyright (c) Microsoft Corporation. All rights reserved.  \n",
        "Licensed under the MIT License."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "![Impressions](https://PixelServer20190423114238.azurewebsites.net/api/impressions/MachineLearningNotebooks/how-to-use-azureml/machine-learning-pipelines/nyc-taxi-data-regression-model-building/nyc-taxi-data-regression-model-building.png)"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# NYC Taxi Data Regression Model\n",
        "This is an [Azure Machine Learning Pipelines](https://aka.ms/aml-pipelines) version of two-part tutorial ([Part 1](https://docs.microsoft.com/en-us/azure/machine-learning/service/tutorial-data-prep), [Part 2](https://docs.microsoft.com/en-us/azure/machine-learning/service/tutorial-auto-train-models)) available for Azure Machine Learning.\n",
        "\n",
        "You can combine the two part tutorial into one using AzureML Pipelines as Pipelines provide a way to stitch together various steps involved (like data preparation and training in this case) in a machine learning workflow.\n",
        "\n",
        "In this notebook, you learn how to prepare data for regression modeling by using open source library [pandas](https://pandas.pydata.org/). You run various transformations to filter and combine two different NYC taxi datasets. Once you prepare the NYC taxi data for regression modeling, then you will use [AutoMLStep](https://docs.microsoft.com/python/api/azureml-train-automl-runtime/azureml.train.automl.runtime.automl_step.automlstep?view=azure-ml-py) available with [Azure Machine Learning Pipelines](https://aka.ms/aml-pipelines) to define your machine learning goals and constraints as well as to launch the automated machine learning process. The automated machine learning technique iterates over many combinations of algorithms and hyperparameters until it finds the best model based on your criterion.\n",
        "\n",
        "After you complete building the model, you can predict the cost of a taxi trip by training a model on data features. These features include the pickup day and time, the number of passengers, and the pickup location.\n",
        "\n",
        "## Prerequisite\n",
        "If you are using an Azure Machine Learning Notebook VM, you are all set. Otherwise, make sure you go through the configuration Notebook located at https://github.com/Azure/MachineLearningNotebooks first if you haven't. This sets you up with a working config file that has information on your workspace, subscription id, etc."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Prepare data for regression modeling\n",
        "First, we will prepare data for regression modeling. We will leverage the convenience of Azure Open Datasets along with the power of Azure Machine Learning service to create a regression model to predict NYC taxi fare prices. Perform `pip install azureml-opendatasets` to get the open dataset package.  The Open Datasets package contains a class representing each data source (NycTlcGreen and NycTlcYellow) to easily filter date parameters before downloading.\n",
        "\n",
        "\n",
        "### Load data\n",
        "Begin by creating a dataframe to hold the taxi data. When working in a non-Spark environment, Open Datasets only allows downloading one month of data at a time with certain classes to avoid MemoryError with large datasets. To download a year of taxi data, iteratively fetch one month at a time, and before appending it to green_df_raw, randomly sample 500 records from each month to avoid bloating the dataframe. Then preview the data. To keep this process short, we are sampling data of only 1 month.\n",
        "\n",
        "Note: Open Datasets has mirroring classes for working in Spark environments where data size and memory aren't a concern."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import azureml.core\n",
        "# Check core SDK version number\n",
        "\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "SDK version: 1.47.0\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1672690090506
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.opendatasets import NycTlcGreen, NycTlcYellow\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "from dateutil.relativedelta import relativedelta\n",
        "\n",
        "green_df_raw = pd.DataFrame([])\n",
        "start = datetime.strptime(\"2/1/2016\",\"%m/%d/%Y\")\n",
        "end = datetime.strptime(\"2/29/2016\",\"%m/%d/%Y\")\n",
        "\n",
        "number_of_months = 1\n",
        "sample_size = 5000\n",
        "\n",
        "for sample_month in range(number_of_months):\n",
        "    temp_df_green = NycTlcGreen(start + relativedelta(months=sample_month), end + relativedelta(months=sample_month)) \\\n",
        "        .to_pandas_dataframe()\n",
        "    green_df_raw = green_df_raw.append(temp_df_green.sample(sample_size))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "[Info] read from /tmp/tmpb385d316/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/green/puYear=2016/puMonth=2/part-00060-tid-4753095944193949832-fee7e113-666d-4114-9fcb-bcd3046479f3-2630-2.c000.snappy.parquet\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1672690269408
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yellow_df_raw = pd.DataFrame([])\n",
        "start = datetime.strptime(\"2/1/2016\",\"%m/%d/%Y\")\n",
        "end = datetime.strptime(\"2/29/2016\",\"%m/%d/%Y\")\n",
        "\n",
        "sample_size = 500\n",
        "\n",
        "for sample_month in range(number_of_months):\n",
        "    temp_df_yellow = NycTlcYellow(start + relativedelta(months=sample_month), end + relativedelta(months=sample_month)) \\\n",
        "        .to_pandas_dataframe()\n",
        "    yellow_df_raw = yellow_df_raw.append(temp_df_yellow.sample(sample_size))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00000-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426339-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00001-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426336-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00002-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426334-92.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00003-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426340-88.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00004-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426331-89.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00005-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426324-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00006-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426326-89.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00007-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426332-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00008-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426341-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00009-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426325-89.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00010-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426335-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00011-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426338-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00012-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426337-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00013-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426327-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00014-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426330-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00015-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426342-90.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00016-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426328-89.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00017-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426323-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00018-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426329-91.c000.snappy.parquet\n[Info] read from /tmp/tmpy2el4slm/https%3A/%2Fazureopendatastorage.azurefd.net/nyctlc/yellow/puYear=2016/puMonth=2/part-00019-tid-8898858832658823408-a1de80bd-eed3-4d11-b9d4-fa74bfbd47bc-426333-89.c000.snappy.parquet\n"
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1672690301986
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### See the data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display\n",
        "\n",
        "display(green_df_raw.head(5))\n",
        "display(yellow_df_raw.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "         vendorID  lpepPickupDatetime lpepDropoffDatetime  passengerCount  \\\n317583          2 2016-02-12 18:48:43 2016-02-12 19:02:24               1   \n1027111         1 2016-02-26 10:24:08 2016-02-26 10:39:05               1   \n1045984         2 2016-02-28 17:06:51 2016-02-28 17:28:17               1   \n508375          2 2016-02-15 15:14:57 2016-02-15 15:23:16               1   \n931834          1 2016-02-24 13:16:43 2016-02-24 13:17:11               1   \n\n         tripDistance puLocationId doLocationId  pickupLongitude  \\\n317583           2.86         None         None       -73.990913   \n1027111          3.80         None         None       -73.954231   \n1045984          2.20         None         None       -73.863884   \n508375           1.34         None         None       -73.962639   \n931834           1.30         None         None       -73.931923   \n\n         pickupLatitude  dropoffLongitude  ...  paymentType  fareAmount extra  \\\n317583        40.693199        -73.996658  ...            1        12.0   1.0   \n1027111       40.684837        -73.992966  ...            1        14.0   0.0   \n1045984       40.733150        -73.859955  ...            2        15.0   0.0   \n508375        40.805145        -73.951073  ...            2         8.0   0.0   \n931834        40.846954        -73.931793  ...            2         9.0   0.0   \n\n         mtaTax  improvementSurcharge  tipAmount  tollsAmount ehailFee  \\\n317583      0.5                   0.3       2.76          0.0      NaN   \n1027111     0.5                   0.3       2.95          0.0      NaN   \n1045984     0.5                   0.3       0.00          0.0      NaN   \n508375      0.5                   0.3       0.00          0.0      NaN   \n931834      0.5                   0.3       0.00          0.0      NaN   \n\n         totalAmount  tripType  \n317583         16.56       1.0  \n1027111        17.75       1.0  \n1045984        15.80       1.0  \n508375          8.80       1.0  \n931834          9.80       1.0  \n\n[5 rows x 23 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vendorID</th>\n      <th>lpepPickupDatetime</th>\n      <th>lpepDropoffDatetime</th>\n      <th>passengerCount</th>\n      <th>tripDistance</th>\n      <th>puLocationId</th>\n      <th>doLocationId</th>\n      <th>pickupLongitude</th>\n      <th>pickupLatitude</th>\n      <th>dropoffLongitude</th>\n      <th>...</th>\n      <th>paymentType</th>\n      <th>fareAmount</th>\n      <th>extra</th>\n      <th>mtaTax</th>\n      <th>improvementSurcharge</th>\n      <th>tipAmount</th>\n      <th>tollsAmount</th>\n      <th>ehailFee</th>\n      <th>totalAmount</th>\n      <th>tripType</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>317583</th>\n      <td>2</td>\n      <td>2016-02-12 18:48:43</td>\n      <td>2016-02-12 19:02:24</td>\n      <td>1</td>\n      <td>2.86</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.990913</td>\n      <td>40.693199</td>\n      <td>-73.996658</td>\n      <td>...</td>\n      <td>1</td>\n      <td>12.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>2.76</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>16.56</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1027111</th>\n      <td>1</td>\n      <td>2016-02-26 10:24:08</td>\n      <td>2016-02-26 10:39:05</td>\n      <td>1</td>\n      <td>3.80</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.954231</td>\n      <td>40.684837</td>\n      <td>-73.992966</td>\n      <td>...</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>2.95</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>17.75</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1045984</th>\n      <td>2</td>\n      <td>2016-02-28 17:06:51</td>\n      <td>2016-02-28 17:28:17</td>\n      <td>1</td>\n      <td>2.20</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.863884</td>\n      <td>40.733150</td>\n      <td>-73.859955</td>\n      <td>...</td>\n      <td>2</td>\n      <td>15.0</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>15.80</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>508375</th>\n      <td>2</td>\n      <td>2016-02-15 15:14:57</td>\n      <td>2016-02-15 15:23:16</td>\n      <td>1</td>\n      <td>1.34</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.962639</td>\n      <td>40.805145</td>\n      <td>-73.951073</td>\n      <td>...</td>\n      <td>2</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>8.80</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>931834</th>\n      <td>1</td>\n      <td>2016-02-24 13:16:43</td>\n      <td>2016-02-24 13:17:11</td>\n      <td>1</td>\n      <td>1.30</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.931923</td>\n      <td>40.846954</td>\n      <td>-73.931793</td>\n      <td>...</td>\n      <td>2</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>9.80</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "       vendorID  tpepPickupDateTime tpepDropoffDateTime  passengerCount  \\\n197487        2 2016-02-01 00:44:13 2016-02-01 01:13:17               1   \n320141        2 2016-02-02 12:15:51 2016-02-02 12:31:04               1   \n316710        1 2016-02-02 21:48:35 2016-02-02 22:13:18               1   \n224219        2 2016-02-18 10:32:55 2016-02-18 10:52:36               2   \n274317        1 2016-02-12 08:44:22 2016-02-12 08:46:11               1   \n\n        tripDistance puLocationId doLocationId   startLon   startLat  \\\n197487         11.78         None         None -73.789841  40.646481   \n320141          1.37         None         None -73.991432  40.750072   \n316710          5.60         None         None -73.981300  40.679806   \n224219          9.60         None         None -73.973747  40.750710   \n274317          0.50         None         None -74.009026  40.712730   \n\n           endLon  ...  rateCodeId  storeAndFwdFlag paymentType fareAmount  \\\n197487 -73.954742  ...           1                N           1       34.5   \n320141 -73.975296  ...           1                N           1       10.5   \n316710 -73.992256  ...           1                N           1       21.0   \n224219 -73.865555  ...           1                N           1       27.5   \n274317 -74.003967  ...           1                N           1        3.5   \n\n        extra  mtaTax  improvementSurcharge tipAmount  tollsAmount  \\\n197487    0.5     0.5                   0.3      7.16         0.00   \n320141    0.0     0.5                   0.3      2.26         0.00   \n316710    0.5     0.5                   0.3      2.00         0.00   \n224219    0.0     0.5                   0.3      6.77         5.54   \n274317    0.0     0.5                   0.3      0.70         0.00   \n\n        totalAmount  \n197487        42.96  \n320141        13.56  \n316710        24.30  \n224219        40.61  \n274317         5.00  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vendorID</th>\n      <th>tpepPickupDateTime</th>\n      <th>tpepDropoffDateTime</th>\n      <th>passengerCount</th>\n      <th>tripDistance</th>\n      <th>puLocationId</th>\n      <th>doLocationId</th>\n      <th>startLon</th>\n      <th>startLat</th>\n      <th>endLon</th>\n      <th>...</th>\n      <th>rateCodeId</th>\n      <th>storeAndFwdFlag</th>\n      <th>paymentType</th>\n      <th>fareAmount</th>\n      <th>extra</th>\n      <th>mtaTax</th>\n      <th>improvementSurcharge</th>\n      <th>tipAmount</th>\n      <th>tollsAmount</th>\n      <th>totalAmount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>197487</th>\n      <td>2</td>\n      <td>2016-02-01 00:44:13</td>\n      <td>2016-02-01 01:13:17</td>\n      <td>1</td>\n      <td>11.78</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.789841</td>\n      <td>40.646481</td>\n      <td>-73.954742</td>\n      <td>...</td>\n      <td>1</td>\n      <td>N</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>7.16</td>\n      <td>0.00</td>\n      <td>42.96</td>\n    </tr>\n    <tr>\n      <th>320141</th>\n      <td>2</td>\n      <td>2016-02-02 12:15:51</td>\n      <td>2016-02-02 12:31:04</td>\n      <td>1</td>\n      <td>1.37</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.991432</td>\n      <td>40.750072</td>\n      <td>-73.975296</td>\n      <td>...</td>\n      <td>1</td>\n      <td>N</td>\n      <td>1</td>\n      <td>10.5</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>2.26</td>\n      <td>0.00</td>\n      <td>13.56</td>\n    </tr>\n    <tr>\n      <th>316710</th>\n      <td>1</td>\n      <td>2016-02-02 21:48:35</td>\n      <td>2016-02-02 22:13:18</td>\n      <td>1</td>\n      <td>5.60</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.981300</td>\n      <td>40.679806</td>\n      <td>-73.992256</td>\n      <td>...</td>\n      <td>1</td>\n      <td>N</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>2.00</td>\n      <td>0.00</td>\n      <td>24.30</td>\n    </tr>\n    <tr>\n      <th>224219</th>\n      <td>2</td>\n      <td>2016-02-18 10:32:55</td>\n      <td>2016-02-18 10:52:36</td>\n      <td>2</td>\n      <td>9.60</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-73.973747</td>\n      <td>40.750710</td>\n      <td>-73.865555</td>\n      <td>...</td>\n      <td>1</td>\n      <td>N</td>\n      <td>1</td>\n      <td>27.5</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>6.77</td>\n      <td>5.54</td>\n      <td>40.61</td>\n    </tr>\n    <tr>\n      <th>274317</th>\n      <td>1</td>\n      <td>2016-02-12 08:44:22</td>\n      <td>2016-02-12 08:46:11</td>\n      <td>1</td>\n      <td>0.50</td>\n      <td>None</td>\n      <td>None</td>\n      <td>-74.009026</td>\n      <td>40.712730</td>\n      <td>-74.003967</td>\n      <td>...</td>\n      <td>1</td>\n      <td>N</td>\n      <td>1</td>\n      <td>3.5</td>\n      <td>0.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>0.70</td>\n      <td>0.00</td>\n      <td>5.00</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1672690323024
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Download data locally and then upload to Azure Blob\n",
        "This is a one-time process to save the dave in the default datastore. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "dataDir = \"data\"\n",
        "\n",
        "if not os.path.exists(dataDir):\n",
        "    os.mkdir(dataDir)\n",
        "\n",
        "greenDir = dataDir + \"/green\"\n",
        "yelloDir = dataDir + \"/yellow\"\n",
        "\n",
        "if not os.path.exists(greenDir):\n",
        "    os.mkdir(greenDir)\n",
        "    \n",
        "if not os.path.exists(yelloDir):\n",
        "    os.mkdir(yelloDir)\n",
        "    \n",
        "greenTaxiData = greenDir + \"/unprepared.parquet\"\n",
        "yellowTaxiData = yelloDir + \"/unprepared.parquet\"\n",
        "\n",
        "green_df_raw.to_csv(greenTaxiData, index=False)\n",
        "yellow_df_raw.to_csv(yellowTaxiData, index=False)\n",
        "\n",
        "print(\"Data written to local folder.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Data written to local folder.\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1672690353858
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Workspace\n",
        "\n",
        "ws = Workspace.from_config()\n",
        "print(\"Workspace: \" + ws.name, \"Region: \" + ws.location, sep = '\\n')\n",
        "\n",
        "# Default datastore\n",
        "default_store = ws.get_default_datastore() \n",
        "\n",
        "default_store.upload_files([greenTaxiData], \n",
        "                           target_path = 'green', \n",
        "                           overwrite = True, \n",
        "                           show_progress = True)\n",
        "\n",
        "default_store.upload_files([yellowTaxiData], \n",
        "                           target_path = 'yellow', \n",
        "                           overwrite = True, \n",
        "                           show_progress = True)\n",
        "\n",
        "print(\"Upload calls completed.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Workspace: mlopsvn-ws\nRegion: eastus2\nUploading an estimated of 1 files\nUploading data/green/unprepared.parquet\nUploaded data/green/unprepared.parquet, 1 files out of an estimated total of 1\nUploaded 1 files\nUploading an estimated of 1 files\nUploading data/yellow/unprepared.parquet\nUploaded data/yellow/unprepared.parquet, 1 files out of an estimated total of 1\nUploaded 1 files\nUpload calls completed.\n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "\"datastore.upload_files\" is deprecated after version 1.0.69. Please use \"FileDatasetFactory.upload_directory\" instead. See Dataset API change notice at https://aka.ms/dataset-deprecation.\n"
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1672690381692
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create and register datasets\n",
        "\n",
        "By creating a dataset, you create a reference to the data source location. If you applied any subsetting transformations to the dataset, they will be stored in the dataset as well. You can learn more about the what subsetting capabilities are supported by referring to [our documentation](https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.data.tabular_dataset.tabulardataset?view=azure-ml-py#remarks). The data remains in its existing location, so no extra storage cost is incurred."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Dataset\n",
        "green_taxi_data = Dataset.Tabular.from_delimited_files(default_store.path('green/unprepared.parquet'))\n",
        "yellow_taxi_data = Dataset.Tabular.from_delimited_files(default_store.path('yellow/unprepared.parquet'))"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1672690554990
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Register the taxi datasets with the workspace so that you can reuse them in other experiments or share with your colleagues who have access to your workspace."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "green_taxi_data = green_taxi_data.register(ws, 'green_taxi_data')\n",
        "yellow_taxi_data = yellow_taxi_data.register(ws, 'yellow_taxi_data')"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1672690568029
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Setup Compute\n",
        "#### Create new or use an existing compute\n",
        "\n",
        "> Note that if you have an AzureML Data Scientist role, you will not have permission to create compute resources. Talk to your workspace or IT admin to create the compute targets described in this section, if they do not already exist."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import ComputeTarget, AmlCompute\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# Choose a name for your CPU cluster\n",
        "amlcompute_cluster_name = \"compute-cluster-taxi\"\n",
        "\n",
        "# Verify that cluster does not exist already\n",
        "try:\n",
        "    aml_compute = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_DS12_V2',\n",
        "                                                           max_nodes=4)\n",
        "    aml_compute = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\n",
        "\n",
        "aml_compute.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found existing cluster, use it.\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1672690938674
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define RunConfig for the compute\n",
        "We will also use `pandas`, `scikit-learn` and `automl`, `pyarrow` for the pipeline steps. Defining the `runconfig` for that."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.runconfig import RunConfiguration\n",
        "from azureml.core.conda_dependencies import CondaDependencies\n",
        "\n",
        "# Create a new runconfig object\n",
        "aml_run_config = RunConfiguration()\n",
        "\n",
        "# Use the aml_compute you created above. \n",
        "aml_run_config.target = aml_compute\n",
        "\n",
        "# Enable Docker\n",
        "aml_run_config.environment.docker.enabled = True\n",
        "\n",
        "# Use conda_dependencies.yml to create a conda environment in the Docker image for execution\n",
        "aml_run_config.environment.python.user_managed_dependencies = False\n",
        "\n",
        "# Specify CondaDependencies obj, add necessary packages\n",
        "aml_run_config.environment.python.conda_dependencies = CondaDependencies.create(\n",
        "    conda_packages=['pandas','scikit-learn'], \n",
        "    pip_packages=['azureml-sdk[automl]', 'pyarrow'])\n",
        "\n",
        "print (\"Run configuration created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "'enabled' is deprecated. Please use the azureml.core.runconfig.DockerConfiguration object with the 'use_docker' param instead.\n"
        }
      ],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1672690950533
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Prepare data\n",
        "Now we will prepare for regression modeling by using `pandas`. We run various transformations to filter and combine two different NYC taxi datasets.\n",
        "\n",
        "We achieve this by creating a separate step for each transformation as this allows us to reuse the steps and saves us from running all over again in case of any change. We will keep data preparation scripts in one subfolder and training scripts in another.\n",
        "\n",
        "> The best practice is to use separate folders for scripts and its dependent files for each step and specify that folder as the `source_directory` for the step. This helps reduce the size of the snapshot created for the step (only the specific folder is snapshotted). Since changes in any files in the `source_directory` would trigger a re-upload of the snapshot, this helps keep the reuse of the step when there are no changes in the `source_directory` of the step."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define Useful Columns\n",
        "Here we are defining a set of \"useful\" columns for both Green and Yellow taxi data."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "display(green_df_raw.columns)\n",
        "display(yellow_df_raw.columns)\n",
        "\n",
        "# useful columns needed for the Azure Machine Learning NYC Taxi tutorial\n",
        "useful_columns = str([\"cost\", \"distance\", \"dropoff_datetime\", \"dropoff_latitude\", \n",
        "                      \"dropoff_longitude\", \"passengers\", \"pickup_datetime\", \n",
        "                      \"pickup_latitude\", \"pickup_longitude\", \"store_forward\", \"vendor\"]).replace(\",\", \";\")\n",
        "\n",
        "print(\"Useful columns defined.\", useful_columns)"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Index(['vendorID', 'lpepPickupDatetime', 'lpepDropoffDatetime',\n       'passengerCount', 'tripDistance', 'puLocationId', 'doLocationId',\n       'pickupLongitude', 'pickupLatitude', 'dropoffLongitude',\n       'dropoffLatitude', 'rateCodeID', 'storeAndFwdFlag', 'paymentType',\n       'fareAmount', 'extra', 'mtaTax', 'improvementSurcharge', 'tipAmount',\n       'tollsAmount', 'ehailFee', 'totalAmount', 'tripType'],\n      dtype='object')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Index(['vendorID', 'tpepPickupDateTime', 'tpepDropoffDateTime',\n       'passengerCount', 'tripDistance', 'puLocationId', 'doLocationId',\n       'startLon', 'startLat', 'endLon', 'endLat', 'rateCodeId',\n       'storeAndFwdFlag', 'paymentType', 'fareAmount', 'extra', 'mtaTax',\n       'improvementSurcharge', 'tipAmount', 'tollsAmount', 'totalAmount'],\n      dtype='object')"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Useful columns defined. ['cost'; 'distance'; 'dropoff_datetime'; 'dropoff_latitude'; 'dropoff_longitude'; 'passengers'; 'pickup_datetime'; 'pickup_latitude'; 'pickup_longitude'; 'store_forward'; 'vendor']\n"
        }
      ],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1672691037279
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Preprocessing Grean Taxi Data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create cleanse.py file"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "%%writefile \"scripts/prepdata/cleanse.py\"\r\n",
        "\r\n",
        "#Import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "from azureml.core import Run\r\n",
        "\r\n",
        "print(\"Clean the input data\")\r\n",
        "\r\n",
        "run = Run.get_context()\r\n",
        "raw_data = run.input_datasets[\"raw_data\"]\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"cleanse\")\r\n",
        "parser.add_argument(\"--output_cleanse\", type=str, help=\"cleaned taxi data directory\")\r\n",
        "parser.add_argument(\"--useful_columns\", type=str, help=\"useful columns to keep\")\r\n",
        "parser.add_argument(\"--columns\", type=str, help=\"rename column pattern\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "\r\n",
        "print(\"Argument 1(columns to keep): %s\" % str(args.useful_columns.strip(\"[]\").split(r'\\;')))\r\n",
        "print(\"Argument 2(columns renaming mapping): %s\" % str(args.columns.strip(\"{}\").split(r'\\;')))\r\n",
        "print(\"Argument 3(output cleansed taxi data path): %s\" % args.output_cleanse)\r\n",
        "\r\n",
        "# These functions ensure that null data is removed from the dataset,\r\n",
        "# which will help increase machine learning model accuracy.\r\n",
        "\r\n",
        "useful_columns = eval(args.useful_columns.replace(';', ','))\r\n",
        "columns = eval(args.columns.replace(';', ','))\r\n",
        "\r\n",
        "new_df = (raw_data.to_pandas_dataframe()\r\n",
        "          .dropna(how='all')\r\n",
        "          .rename(columns=columns))[useful_columns]\r\n",
        "\r\n",
        "new_df.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "if not (args.output_cleanse is None):\r\n",
        "    os.makedirs(args.output_cleanse, exist_ok=True)\r\n",
        "    print(\"%s created\" % args.output_cleanse)\r\n",
        "    path = args.output_cleanse + \"/processed.parquet\"\r\n",
        "    write_df = new_df.to_parquet(path)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting scripts/prepdata/cleanse.py\n"
        }
      ],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Cleanse Green taxi data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import PipelineData\n",
        "from azureml.pipeline.steps import PythonScriptStep\n",
        "\n",
        "# python scripts folder\n",
        "prepare_data_folder = './scripts/prepdata'\n",
        "\n",
        "# rename columns as per Azure Machine Learning NYC Taxi tutorial\n",
        "green_columns = str({ \n",
        "    \"vendorID\": \"vendor\",\n",
        "    \"lpepPickupDatetime\": \"pickup_datetime\",\n",
        "    \"lpepDropoffDatetime\": \"dropoff_datetime\",\n",
        "    \"storeAndFwdFlag\": \"store_forward\",\n",
        "    \"pickupLongitude\": \"pickup_longitude\",\n",
        "    \"pickupLatitude\": \"pickup_latitude\",\n",
        "    \"dropoffLongitude\": \"dropoff_longitude\",\n",
        "    \"dropoffLatitude\": \"dropoff_latitude\",\n",
        "    \"passengerCount\": \"passengers\",\n",
        "    \"fareAmount\": \"cost\",\n",
        "    \"tripDistance\": \"distance\"\n",
        "}).replace(\",\", \";\")\n",
        "\n",
        "# Define output after cleansing step\n",
        "cleansed_green_data = PipelineData(\"cleansed_green_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Cleanse script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# cleansing step creation\n",
        "# See the cleanse.py for details about input and output\n",
        "cleansingStepGreen = PythonScriptStep(\n",
        "    name=\"Cleanse Green Taxi Data\",\n",
        "    script_name=\"cleanse.py\", \n",
        "    arguments=[\"--useful_columns\", useful_columns,\n",
        "               \"--columns\", green_columns,\n",
        "               \"--output_cleanse\", cleansed_green_data],\n",
        "    inputs=[green_taxi_data.as_named_input('raw_data')],\n",
        "    outputs=[cleansed_green_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig=aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"cleansingStepGreen created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Cleanse script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\ncleansingStepGreen created.\n"
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1672691376542
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Cleanse Yellow taxi data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "yellow_columns = str({\n",
        "    \"vendorID\": \"vendor\",\n",
        "    \"tpepPickupDateTime\": \"pickup_datetime\",\n",
        "    \"tpepDropoffDateTime\": \"dropoff_datetime\",\n",
        "    \"storeAndFwdFlag\": \"store_forward\",\n",
        "    \"startLon\": \"pickup_longitude\",\n",
        "    \"startLat\": \"pickup_latitude\",\n",
        "    \"endLon\": \"dropoff_longitude\",\n",
        "    \"endLat\": \"dropoff_latitude\",\n",
        "    \"passengerCount\": \"passengers\",\n",
        "    \"fareAmount\": \"cost\",\n",
        "    \"tripDistance\": \"distance\"\n",
        "}).replace(\",\", \";\")\n",
        "\n",
        "# Define output after cleansing step\n",
        "cleansed_yellow_data = PipelineData(\"cleansed_yellow_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Cleanse script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# cleansing step creation\n",
        "# See the cleanse.py for details about input and output\n",
        "cleansingStepYellow = PythonScriptStep(\n",
        "    name=\"Cleanse Yellow Taxi Data\",\n",
        "    script_name=\"cleanse.py\", \n",
        "    arguments=[\"--useful_columns\", useful_columns,\n",
        "               \"--columns\", yellow_columns,\n",
        "               \"--output_cleanse\", cleansed_yellow_data],\n",
        "    inputs=[yellow_taxi_data.as_named_input('raw_data')],\n",
        "    outputs=[cleansed_yellow_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig=aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"cleansingStepYellow created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Cleanse script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\ncleansingStepYellow created.\n"
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1672691455593
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Merge cleansed Green and Yellow datasets"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create merge.py file"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile \"scripts/prepdata/merge.py\"\r\n",
        "\r\n",
        "#import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "from azureml.core import Run\r\n",
        "\r\n",
        "print(\"Merge Green and Yellow taxi data\")\r\n",
        "\r\n",
        "run = Run.get_context()\r\n",
        "\r\n",
        "cleansed_green_data = run.input_datasets[\"cleansed_green_data\"]\r\n",
        "cleansed_yellow_data = run.input_datasets[\"cleansed_yellow_data\"]\r\n",
        "green_df = cleansed_green_data.to_pandas_dataframe()\r\n",
        "yellow_df = cleansed_yellow_data.to_pandas_dataframe()\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"merge\")\r\n",
        "parser.add_argument(\"--output_merge\", type=str, help=\"green and yellow taxi data merged\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "print(\"Argument (output merge taxi data path): %s\" % args.output_merge)\r\n",
        "\r\n",
        "# Appending yellow data to green data\r\n",
        "combined_df = green_df.append(yellow_df, ignore_index=True)\r\n",
        "combined_df.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "if not (args.output_merge is None):\r\n",
        "    os.makedirs(args.output_merge, exist_ok=True)\r\n",
        "    print(\"%s created\" % args.output_merge)\r\n",
        "    path = args.output_merge + \"/processed.parquet\"\r\n",
        "    write_df = combined_df.to_parquet(path)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Merge cleansed Green and Yellow datasets\n",
        "We are creating a single data source by merging the cleansed versions of Green and Yellow taxi data."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Define output after merging step\n",
        "merged_data = PipelineData(\"merged_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Merge script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# merging step creation\n",
        "# See the merge.py for details about input and output\n",
        "mergingStep = PythonScriptStep(\n",
        "    name=\"Merge Taxi Data\",\n",
        "    script_name=\"merge.py\", \n",
        "    arguments=[\"--output_merge\", merged_data],\n",
        "    inputs=[cleansed_green_data.parse_parquet_files(),\n",
        "            cleansed_yellow_data.parse_parquet_files()],\n",
        "    outputs=[merged_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig=aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"mergingStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Merge script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\nmergingStep created.\n"
        }
      ],
      "execution_count": 22,
      "metadata": {
        "gather": {
          "logged": 1672691822601
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Filter data\n",
        "This step filters out coordinates for locations that are outside the city border. We use a TypeConverter object to change the latitude and longitude fields to decimal type. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile \"scripts/prepdata/filter.py\"\r\n",
        "\r\n",
        "#import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "from azureml.core import Run\r\n",
        "\r\n",
        "print(\"Filters out coordinates for locations that are outside the city border.\",\r\n",
        "      \"Chain the column filter commands within the filter() function\",\r\n",
        "      \"and define the minimum and maximum bounds for each field.\")\r\n",
        "\r\n",
        "run = Run.get_context()\r\n",
        "\r\n",
        "merged_data = run.input_datasets[\"merged_data\"]\r\n",
        "combined_df = merged_data.to_pandas_dataframe()\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"filter\")\r\n",
        "parser.add_argument(\"--output_filter\", type=str, help=\"filter out out of city locations\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "\r\n",
        "print(\"Argument (output filtered taxi data path): %s\" % args.output_filter)\r\n",
        "\r\n",
        "combined_df = combined_df.astype({\"pickup_longitude\": 'float64', \"pickup_latitude\": 'float64',\r\n",
        "                                  \"dropoff_longitude\": 'float64', \"dropoff_latitude\": 'float64'})\r\n",
        "\r\n",
        "latlong_filtered_df = combined_df[(combined_df.pickup_longitude <= -73.72)\r\n",
        "                                  & (combined_df.pickup_longitude >= -74.09)\r\n",
        "                                  & (combined_df.pickup_latitude <= 40.88)\r\n",
        "                                  & (combined_df.pickup_latitude >= 40.53)\r\n",
        "                                  & (combined_df.dropoff_longitude <= -73.72)\r\n",
        "                                  & (combined_df.dropoff_longitude >= -74.72)\r\n",
        "                                  & (combined_df.dropoff_latitude <= 40.88)\r\n",
        "                                  & (combined_df.dropoff_latitude >= 40.53)]\r\n",
        "\r\n",
        "latlong_filtered_df.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "if not (args.output_filter is None):\r\n",
        "    os.makedirs(args.output_filter, exist_ok=True)\r\n",
        "    print(\"%s created\" % args.output_filter)\r\n",
        "    path = args.output_filter + \"/processed.parquet\"\r\n",
        "    write_df = latlong_filtered_df.to_parquet(path)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting scripts/prepdata/filter.py\n"
        }
      ],
      "execution_count": 23,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define output after merging step\n",
        "filtered_data = PipelineData(\"filtered_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Filter script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# filter step creation\n",
        "# See the filter.py for details about input and output\n",
        "filterStep = PythonScriptStep(\n",
        "    name=\"Filter Taxi Data\",\n",
        "    script_name=\"filter.py\", \n",
        "    arguments=[\"--output_filter\", filtered_data],\n",
        "    inputs=[merged_data.parse_parquet_files()],\n",
        "    outputs=[filtered_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig = aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"FilterStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Filter script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\nFilterStep created.\n"
        }
      ],
      "execution_count": 24,
      "metadata": {
        "gather": {
          "logged": 1672691868523
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Normalize data\n",
        "In this step, we split the pickup and dropoff datetime values into the respective date and time columns and then we rename the columns to use meaningful names."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile \"scripts/prepdata/normalize.py\"\r\n",
        "\r\n",
        "#import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "import pandas as pd\r\n",
        "from azureml.core import Run\r\n",
        "\r\n",
        "print(\"Replace undefined values to relavant values and rename columns to meaningful names\")\r\n",
        "\r\n",
        "run = Run.get_context()\r\n",
        "\r\n",
        "filtered_data = run.input_datasets['filtered_data']\r\n",
        "combined_converted_df = filtered_data.to_pandas_dataframe()\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"normalize\")\r\n",
        "parser.add_argument(\"--output_normalize\", type=str, help=\"replaced undefined values and renamed columns\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "\r\n",
        "print(\"Argument (output normalized taxi data path): %s\" % args.output_normalize)\r\n",
        "\r\n",
        "# These functions replace undefined values and rename to use meaningful names.\r\n",
        "replaced_stfor_vals_df = (combined_converted_df.replace({\"store_forward\": \"0\"}, {\"store_forward\": \"N\"})\r\n",
        "                          .fillna({\"store_forward\": \"N\"}))\r\n",
        "\r\n",
        "replaced_distance_vals_df = (replaced_stfor_vals_df.replace({\"distance\": \".00\"}, {\"distance\": 0})\r\n",
        "                             .fillna({\"distance\": 0}))\r\n",
        "\r\n",
        "normalized_df = replaced_distance_vals_df.astype({\"distance\": 'float64'})\r\n",
        "\r\n",
        "#convert time to milliseconds\r\n",
        "def time_to_us(time_str):\r\n",
        "    hh, mm , ss = map(int, time_str.split(':'))\r\n",
        "    return (ss + 60 * (mm + 60 * hh)) * (10**6)\r\n",
        "\r\n",
        "\r\n",
        "temp = pd.DatetimeIndex(normalized_df[\"pickup_datetime\"])\r\n",
        "normalized_df[\"pickup_date\"] = pd.to_datetime(temp.date)\r\n",
        "normalized_df[\"pickup_time\"] = temp.time\r\n",
        "normalized_df[\"pickup_time\"] = normalized_df[\"pickup_time\"].apply(lambda x: time_to_us(str(x)))\r\n",
        "\r\n",
        "temp = pd.DatetimeIndex(normalized_df[\"dropoff_datetime\"])\r\n",
        "normalized_df[\"dropoff_date\"] = pd.to_datetime(temp.date)\r\n",
        "normalized_df[\"dropoff_time\"] = temp.time\r\n",
        "normalized_df[\"dropoff_time\"] = normalized_df[\"dropoff_time\"].apply(lambda x: time_to_us(str(x)))\r\n",
        "\r\n",
        "del normalized_df[\"pickup_datetime\"]\r\n",
        "del normalized_df[\"dropoff_datetime\"]\r\n",
        "\r\n",
        "normalized_df.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "if not (args.output_normalize is None):\r\n",
        "    os.makedirs(args.output_normalize, exist_ok=True)\r\n",
        "    print(\"%s created\" % args.output_normalize)\r\n",
        "    path = args.output_normalize + \"/processed.parquet\"\r\n",
        "    write_df = normalized_df.to_parquet(path)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting scripts/prepdata/normalize.py\n"
        }
      ],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define output after normalize step\n",
        "normalized_data = PipelineData(\"normalized_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Normalize script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# normalize step creation\n",
        "# See the normalize.py for details about input and output\n",
        "normalizeStep = PythonScriptStep(\n",
        "    name=\"Normalize Taxi Data\",\n",
        "    script_name=\"normalize.py\", \n",
        "    arguments=[\"--output_normalize\", normalized_data],\n",
        "    inputs=[filtered_data.parse_parquet_files()],\n",
        "    outputs=[normalized_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig = aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"normalizeStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Normalize script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\nnormalizeStep created.\n"
        }
      ],
      "execution_count": 27,
      "metadata": {
        "gather": {
          "logged": 1672691922148
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Transform data\n",
        "Transform the normalized taxi data to final required format. This steps does the following:\n",
        "\n",
        "- Split the pickup and dropoff date further into the day of the week, day of the month, and month values. \n",
        "- To get the day of the week value, uses the derive_column_by_example() function. The function takes an array parameter of example objects that define the input data, and the preferred output. The function automatically determines the preferred transformation. For the pickup and dropoff time columns, split the time into the hour, minute, and second by using the split_column_by_example() function with no example parameter.\n",
        "- After new features are generated, use the drop_columns() function to delete the original fields as the newly generated features are preferred. \n",
        "- Rename the rest of the fields to use meaningful descriptions."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile \"scripts/prepdata/transform.py\"\r\n",
        "\r\n",
        "#import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "from azureml.core import Run\r\n",
        "\r\n",
        "print(\"Transforms the renamed taxi data to the required format\")\r\n",
        "\r\n",
        "run = Run.get_context()\r\n",
        "\r\n",
        "normalized_data = run.input_datasets['normalized_data']\r\n",
        "normalized_df = normalized_data.to_pandas_dataframe()\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"transform\")\r\n",
        "parser.add_argument(\"--output_transform\", type=str, help=\"transformed taxi data\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "\r\n",
        "print(\"Argument 2(output final transformed taxi data): %s\" % args.output_transform)\r\n",
        "\r\n",
        "# These functions transform the renamed data to be used finally for training.\r\n",
        "\r\n",
        "# Split the pickup and dropoff date further into the day of the week, day of the month, and month values.\r\n",
        "# To get the day of the week value, use the derive_column_by_example() function.\r\n",
        "# The function takes an array parameter of example objects that define the input data,\r\n",
        "# and the preferred output. The function automatically determines your preferred transformation.\r\n",
        "# For the pickup and dropoff time columns, split the time into the hour, minute, and second by using\r\n",
        "# the split_column_by_example() function with no example parameter. After you generate the new features,\r\n",
        "# use the drop_columns() function to delete the original fields as the newly generated features are preferred.\r\n",
        "# Rename the rest of the fields to use meaningful descriptions.\r\n",
        "\r\n",
        "normalized_df = normalized_df.astype({\"pickup_date\": 'datetime64[ns]', \"dropoff_date\": 'datetime64[ns]',\r\n",
        "                                      \"pickup_time\": 'datetime64[us]', \"dropoff_time\": 'datetime64[us]',\r\n",
        "                                      \"distance\": 'float64', \"cost\": 'float64'})\r\n",
        "\r\n",
        "normalized_df[\"pickup_weekday\"] = normalized_df[\"pickup_date\"].dt.dayofweek\r\n",
        "normalized_df[\"pickup_month\"] = normalized_df[\"pickup_date\"].dt.month\r\n",
        "normalized_df[\"pickup_monthday\"] = normalized_df[\"pickup_date\"].dt.day\r\n",
        "\r\n",
        "normalized_df[\"dropoff_weekday\"] = normalized_df[\"dropoff_date\"].dt.dayofweek\r\n",
        "normalized_df[\"dropoff_month\"] = normalized_df[\"dropoff_date\"].dt.month\r\n",
        "normalized_df[\"dropoff_monthday\"] = normalized_df[\"dropoff_date\"].dt.day\r\n",
        "\r\n",
        "normalized_df[\"pickup_hour\"] = normalized_df[\"pickup_time\"].dt.hour\r\n",
        "normalized_df[\"pickup_minute\"] = normalized_df[\"pickup_time\"].dt.minute\r\n",
        "normalized_df[\"pickup_second\"] = normalized_df[\"pickup_time\"].dt.second\r\n",
        "\r\n",
        "normalized_df[\"dropoff_hour\"] = normalized_df[\"dropoff_time\"].dt.hour\r\n",
        "normalized_df[\"dropoff_minute\"] = normalized_df[\"dropoff_time\"].dt.minute\r\n",
        "normalized_df[\"dropoff_second\"] = normalized_df[\"dropoff_time\"].dt.second\r\n",
        "\r\n",
        "# Drop the pickup_date, dropoff_date, pickup_time, dropoff_time columns because they're\r\n",
        "# no longer needed (granular time features like hour,\r\n",
        "# minute and second are more useful for model training).\r\n",
        "del normalized_df[\"pickup_date\"]\r\n",
        "del normalized_df[\"dropoff_date\"]\r\n",
        "del normalized_df[\"pickup_time\"]\r\n",
        "del normalized_df[\"dropoff_time\"]\r\n",
        "\r\n",
        "# Before packaging the dataset, run two final filters on the dataset.\r\n",
        "# To eliminate incorrectly captured data points,\r\n",
        "# filter the dataset on records where both the cost and distance variable values are greater than zero.\r\n",
        "# This step will significantly improve machine learning model accuracy,\r\n",
        "# because data points with a zero cost or distance represent major outliers that throw off prediction accuracy.\r\n",
        "\r\n",
        "final_df = normalized_df[(normalized_df.distance > 0) & (normalized_df.cost > 0)]\r\n",
        "final_df.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "# Writing the final dataframe to use for training in the following steps\r\n",
        "if not (args.output_transform is None):\r\n",
        "    os.makedirs(args.output_transform, exist_ok=True)\r\n",
        "    print(\"%s created\" % args.output_transform)\r\n",
        "    path = args.output_transform + \"/processed.parquet\"\r\n",
        "    write_df = final_df.to_parquet(path)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting scripts/prepdata/transform.py\n"
        }
      ],
      "execution_count": 28,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define output after transform step\n",
        "transformed_data = PipelineData(\"transformed_data\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Transform script is in {}.'.format(os.path.realpath(prepare_data_folder)))\n",
        "\n",
        "# transform step creation\n",
        "# See the transform.py for details about input and output\n",
        "transformStep = PythonScriptStep(\n",
        "    name=\"Transform Taxi Data\",\n",
        "    script_name=\"transform.py\", \n",
        "    arguments=[\"--output_transform\", transformed_data],\n",
        "    inputs=[normalized_data.parse_parquet_files()],\n",
        "    outputs=[transformed_data],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig = aml_run_config,\n",
        "    source_directory=prepare_data_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"transformStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Transform script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/prepdata.\ntransformStep created.\n"
        }
      ],
      "execution_count": 29,
      "metadata": {
        "gather": {
          "logged": 1672691948087
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Split the data into train and test sets\n",
        "This function segregates the data into dataset for model training and dataset for testing."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile \"scripts/prepdata/split_data.py\"\r\n",
        "\r\n",
        "#import libraries\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "# import azureml.core\r\n",
        "from azureml.core import Run\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "\r\n",
        "def write_output(df, path):\r\n",
        "    os.makedirs(path, exist_ok=True)\r\n",
        "    print(\"%s created\" % path)\r\n",
        "    df.to_parquet(path + \"/processed.parquet\")\r\n",
        "\r\n",
        "\r\n",
        "print(\"Split the data into train and test\")\r\n",
        "run = Run.get_context()\r\n",
        "transformed_data = run.input_datasets['transformed_data']\r\n",
        "transformed_df = transformed_data.to_pandas_dataframe()\r\n",
        "\r\n",
        "parser = argparse.ArgumentParser(\"split\")\r\n",
        "parser.add_argument(\"--output_split_train\", type=str, help=\"output split train data\")\r\n",
        "parser.add_argument(\"--output_split_test\", type=str, help=\"output split test data\")\r\n",
        "\r\n",
        "args = parser.parse_args()\r\n",
        "\r\n",
        "print(\"Argument 1(output training data split path): %s\" % args.output_split_train)\r\n",
        "print(\"Argument 2(output test data split path): %s\" % args.output_split_test)\r\n",
        "\r\n",
        "output_split_train, output_split_test = train_test_split(transformed_df, test_size=0.2, random_state=223)\r\n",
        "output_split_train.reset_index(inplace=True, drop=True)\r\n",
        "output_split_test.reset_index(inplace=True, drop=True)\r\n",
        "\r\n",
        "if not (args.output_split_train\r\n",
        "        is None and args.output_split_test is None):\r\n",
        "    write_output(output_split_train, args.output_split_train)\r\n",
        "    write_output(output_split_test, args.output_split_test)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Writing scripts/prepdata/split_data.py\n"
        }
      ],
      "execution_count": 30,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_model_folder = './scripts/trainmodel'\n",
        "\n",
        "# train and test splits output\n",
        "output_split_train = PipelineData(\"output_split_train\", datastore=default_store, is_directory=True).as_dataset()\n",
        "output_split_test = PipelineData(\"output_split_test\", datastore=default_store, is_directory=True).as_dataset()\n",
        "\n",
        "print('Data spilt script is in {}.'.format(os.path.realpath(train_model_folder)))\n",
        "\n",
        "# test train split step creation\n",
        "# See the train_test_split.py for details about input and output\n",
        "testTrainSplitStep = PythonScriptStep(\n",
        "    name=\"Train Test Data Split\",\n",
        "    script_name=\"train_test_split.py\", \n",
        "    arguments=[\"--output_split_train\", output_split_train,\n",
        "               \"--output_split_test\", output_split_test],\n",
        "    inputs=[transformed_data.parse_parquet_files()],\n",
        "    outputs=[output_split_train, output_split_test],\n",
        "    compute_target=aml_compute,\n",
        "    runconfig = aml_run_config,\n",
        "    source_directory=train_model_folder,\n",
        "    allow_reuse=True\n",
        ")\n",
        "\n",
        "print(\"testTrainSplitStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Data spilt script is in /mnt/batch/tasks/shared/LS_root/mounts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building/scripts/trainmodel.\ntestTrainSplitStep created.\n"
        }
      ],
      "execution_count": 31,
      "metadata": {
        "gather": {
          "logged": 1672692000858
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Use automated machine learning to build regression model\n",
        "Now we will use **automated machine learning** to build the regression model. We will use [AutoMLStep](https://docs.microsoft.com/python/api/azureml-train-automl-runtime/azureml.train.automl.runtime.automl_step.automlstep?view=azure-ml-py) in AML Pipelines for this part. Perform `pip install azureml-sdk[automl]`to get the automated machine learning package. These functions use various features from the data set and allow an automated model to build relationships between the features and the price of a taxi trip."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Automatically train a model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create experiment"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Experiment\n",
        "\n",
        "experiment = Experiment(ws, 'NYCTaxi_Tutorial_Pipelines')\n",
        "\n",
        "print(\"Experiment created\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Experiment created\n"
        }
      ],
      "execution_count": 32,
      "metadata": {
        "gather": {
          "logged": 1672692032882
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define settings for autogeneration and tuning\n",
        "\n",
        "Here we define the experiment parameter and model settings for autogeneration and tuning. We can specify automl_settings as **kwargs as well.\n",
        "\n",
        "Use your defined training settings as a parameter to an `AutoMLConfig` object. Additionally, specify your training data and the type of model, which is `regression` in this case.\n",
        "\n",
        "Note: When using AmlCompute, we can't pass Numpy arrays directly to the fit method."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.train.automl import AutoMLConfig\n",
        "\n",
        "# Change iterations to a reasonable number (50) to get better accuracy\n",
        "automl_settings = {\n",
        "    \"iteration_timeout_minutes\" : 10,\n",
        "    \"iterations\" : 2,\n",
        "    \"primary_metric\" : 'spearman_correlation',\n",
        "    \"n_cross_validations\": 5\n",
        "}\n",
        "\n",
        "training_dataset = output_split_train.parse_parquet_files().keep_columns(['pickup_weekday','pickup_hour', 'distance','passengers', 'vendor', 'cost'])\n",
        "\n",
        "automl_config = AutoMLConfig(task = 'regression',\n",
        "                             debug_log = 'automated_ml_errors.log',\n",
        "                             path = train_model_folder,\n",
        "                             compute_target = aml_compute,\n",
        "                             featurization = 'auto',\n",
        "                             training_data = training_dataset,\n",
        "                             label_column_name = 'cost',\n",
        "                             **automl_settings)\n",
        "                             \n",
        "print(\"AutoML config created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "AutoML config created.\n"
        }
      ],
      "execution_count": 33,
      "metadata": {
        "gather": {
          "logged": 1672692051161
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define AutoMLStep"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "trainWithAutomlStep = AutoMLStep(name='AutoML_Regression',\n",
        "                                 automl_config=automl_config,\n",
        "                                 allow_reuse=True)\n",
        "print(\"trainWithAutomlStep created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "trainWithAutomlStep created.\n"
        }
      ],
      "execution_count": 34,
      "metadata": {
        "gather": {
          "logged": 1672692062084
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Build and run the pipeline"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import Pipeline\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "pipeline_steps = [trainWithAutomlStep]\n",
        "\n",
        "pipeline = Pipeline(workspace = ws, steps=pipeline_steps)\n",
        "print(\"Pipeline is built.\")\n",
        "\n",
        "pipeline_run = experiment.submit(pipeline, regenerate_outputs=False)\n",
        "\n",
        "print(\"Pipeline submitted for execution.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Pipeline is built.\nCreated step AutoML_Regression [cadedd43][f382ce3c-21cd-4ff0-b3ee-9788c63e0920], (This step will run and generate new outputs)\nCreated step Train Test Data Split [8688b060][af24344d-f05e-4598-96ed-15a9ddf234ac], (This step will run and generate new outputs)\nCreated step Transform Taxi Data [00824321][cc6ae4b8-2ce0-41ac-9342-3284a74b93a3], (This step will run and generate new outputs)\nCreated step Normalize Taxi Data [eb2c675f][a9b4b21f-1aa9-4a35-a6a5-1d24531e5378], (This step will run and generate new outputs)\nCreated step Filter Taxi Data [ac554bc4][32d6b749-dac1-4dca-8a70-8ab6f2c17948], (This step will run and generate new outputs)\nCreated step Merge Taxi Data [7b6c3a13][1b365828-0c89-4294-869c-8c085bed377c], (This step will run and generate new outputs)\nCreated step Cleanse Green Taxi Data [46289648][eac6dc68-224e-4578-b514-53f02bc21a08], (This step will run and generate new outputs)Created step Cleanse Yellow Taxi Data [b21acb8a][4a2ba563-dc48-4318-8b94-5540d5ff32e7], (This step will run and generate new outputs)\n\nSubmitted PipelineRun 622ac3f5-a1d9-4514-a00e-f6234bba6d00\nLink to Azure Machine Learning Portal: https://ml.azure.com/runs/622ac3f5-a1d9-4514-a00e-f6234bba6d00?wsid=/subscriptions/2c56960a-079e-42e0-9944-76091405ea34/resourcegroups/mlopsvn/workspaces/mlopsvn-ws&tid=16cfc3dc-514c-42b0-ac64-e8a989f753c5\nPipeline submitted for execution.\n"
        }
      ],
      "execution_count": 35,
      "metadata": {
        "gather": {
          "logged": 1672692082467
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "RunDetails(pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9ce0266e33f7442f9370ae00b370beba"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/622ac3f5-a1d9-4514-a00e-f6234bba6d00?wsid=/subscriptions/2c56960a-079e-42e0-9944-76091405ea34/resourcegroups/mlopsvn/workspaces/mlopsvn-ws&tid=16cfc3dc-514c-42b0-ac64-e8a989f753c5\", \"run_id\": \"622ac3f5-a1d9-4514-a00e-f6234bba6d00\", \"run_properties\": {\"run_id\": \"622ac3f5-a1d9-4514-a00e-f6234bba6d00\", \"created_utc\": \"2023-01-02T20:41:21.519976Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"SDK\", \"runType\": \"SDK\", \"azureml.parameters\": \"{}\", \"azureml.continue_on_step_failure\": \"False\", \"azureml.continue_on_failed_optional_input\": \"True\", \"azureml.pipelineComponent\": \"pipelinerun\", \"azureml.pipelines.stages\": \"{\\\"Initialization\\\":null,\\\"Execution\\\":{\\\"StartTime\\\":\\\"2023-01-02T20:41:23.3124475+00:00\\\",\\\"EndTime\\\":\\\"2023-01-02T21:02:12.2523049+00:00\\\",\\\"Status\\\":\\\"Finished\\\"}}\"}, \"tags\": {}, \"end_time_utc\": \"2023-01-02T21:02:12.342225Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://mlopsvnws2129609867.blob.core.windows.net/azureml/ExperimentRun/dcid.622ac3f5-a1d9-4514-a00e-f6234bba6d00/logs/azureml/executionlogs.txt?sv=2019-07-07&sr=b&sig=uvIzOL71wXPUkzTAr6R7vYkhC0zkUjp32P9QjTJK8SA%3D&skoid=6726fb2d-ca93-44d1-96a4-14649ca46d5e&sktid=16cfc3dc-514c-42b0-ac64-e8a989f753c5&skt=2023-01-02T20%3A31%3A23Z&ske=2023-01-04T04%3A41%3A23Z&sks=b&skv=2019-07-07&st=2023-01-02T20%3A52%3A44Z&se=2023-01-03T05%3A02%3A44Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://mlopsvnws2129609867.blob.core.windows.net/azureml/ExperimentRun/dcid.622ac3f5-a1d9-4514-a00e-f6234bba6d00/logs/azureml/stderrlogs.txt?sv=2019-07-07&sr=b&sig=cj%2FIzSm%2FX1R2ZxfoujONUHarjtKhsc1sRj4%2Fs4AzeQA%3D&skoid=6726fb2d-ca93-44d1-96a4-14649ca46d5e&sktid=16cfc3dc-514c-42b0-ac64-e8a989f753c5&skt=2023-01-02T20%3A31%3A23Z&ske=2023-01-04T04%3A41%3A23Z&sks=b&skv=2019-07-07&st=2023-01-02T20%3A52%3A44Z&se=2023-01-03T05%3A02%3A44Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://mlopsvnws2129609867.blob.core.windows.net/azureml/ExperimentRun/dcid.622ac3f5-a1d9-4514-a00e-f6234bba6d00/logs/azureml/stdoutlogs.txt?sv=2019-07-07&sr=b&sig=12ybv2e7FNss7UIqVw1mGJsuYWtTcW%2FiWNBtjmCZod8%3D&skoid=6726fb2d-ca93-44d1-96a4-14649ca46d5e&sktid=16cfc3dc-514c-42b0-ac64-e8a989f753c5&skt=2023-01-02T20%3A31%3A23Z&ske=2023-01-04T04%3A41%3A23Z&sks=b&skv=2019-07-07&st=2023-01-02T20%3A52%3A44Z&se=2023-01-03T05%3A02%3A44Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:20:50\", \"run_number\": \"1672692081\", \"run_queued_details\": {\"status\": \"Finished\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"33fef505-de95-4b59-8b23-c5792e283e63\", \"name\": \"AutoML_Regression\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:58:46.934987Z\", \"created_time\": \"2023-01-02T20:58:33.112018Z\", \"end_time\": \"2023-01-02T21:02:04.187176Z\", \"duration\": \"0:03:31\", \"run_number\": 1672693113, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:58:33.112018Z\", \"is_reused\": \"\"}, {\"run_id\": \"a7dbf2fc-2f04-4762-9cce-e7b503d1bf12\", \"name\": \"Train Test Data Split\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:58:12.867429Z\", \"created_time\": \"2023-01-02T20:58:08.524166Z\", \"end_time\": \"2023-01-02T20:58:32.145396Z\", \"duration\": \"0:00:23\", \"run_number\": 1672693088, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:58:08.524166Z\", \"is_reused\": \"\"}, {\"run_id\": \"6f902cf4-5f54-4cb5-8cc0-f7f32b68b10e\", \"name\": \"Transform Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:57:47.493759Z\", \"created_time\": \"2023-01-02T20:57:43.303435Z\", \"end_time\": \"2023-01-02T20:58:06.318659Z\", \"duration\": \"0:00:23\", \"run_number\": 1672693063, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:57:43.303435Z\", \"is_reused\": \"\"}, {\"run_id\": \"47eaa3a4-286b-4306-8576-47092825d1cc\", \"name\": \"Normalize Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:57:22.179666Z\", \"created_time\": \"2023-01-02T20:57:16.618108Z\", \"end_time\": \"2023-01-02T20:57:41.400284Z\", \"duration\": \"0:00:24\", \"run_number\": 1672693036, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:57:16.618108Z\", \"is_reused\": \"\"}, {\"run_id\": \"61c437ce-e12a-4139-a9fd-5995881886fc\", \"name\": \"Filter Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:55.997096Z\", \"created_time\": \"2023-01-02T20:56:50.303108Z\", \"end_time\": \"2023-01-02T20:57:14.692579Z\", \"duration\": \"0:00:24\", \"run_number\": 1672693010, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:56:50.303108Z\", \"is_reused\": \"\"}, {\"run_id\": \"d698bad5-c883-4a5e-a88e-a34a5e74ad54\", \"name\": \"Merge Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:29.641791Z\", \"created_time\": \"2023-01-02T20:56:25.773327Z\", \"end_time\": \"2023-01-02T20:56:48.408021Z\", \"duration\": \"0:00:22\", \"run_number\": 1672692985, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:56:25.773327Z\", \"is_reused\": \"\"}, {\"run_id\": \"06755b0e-ea44-498c-afa0-56d11fc07192\", \"name\": \"Cleanse Green Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:54:50.029252Z\", \"created_time\": \"2023-01-02T20:41:25.552625Z\", \"end_time\": \"2023-01-02T20:56:01.777636Z\", \"duration\": \"0:14:36\", \"run_number\": 1672692085, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:41:25.552625Z\", \"is_reused\": \"\"}, {\"run_id\": \"74b011ce-9d07-4a10-99c1-4d7964e2a3b2\", \"name\": \"Cleanse Yellow Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:04.711684Z\", \"created_time\": \"2023-01-02T20:41:25.209021Z\", \"end_time\": \"2023-01-02T20:56:23.320807Z\", \"duration\": \"0:14:58\", \"run_number\": 1672692085, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:41:25.209021Z\", \"is_reused\": \"\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2023-01-02 20:41:23Z] Submitting 2 runs, first five are: 46289648:06755b0e-ea44-498c-afa0-56d11fc07192,b21acb8a:74b011ce-9d07-4a10-99c1-4d7964e2a3b2\\n[2023-01-02 20:56:02Z] Completing processing run id 06755b0e-ea44-498c-afa0-56d11fc07192.\\n[2023-01-02 20:56:24Z] Completing processing run id 74b011ce-9d07-4a10-99c1-4d7964e2a3b2.\\n[2023-01-02 20:56:24Z] Submitting 1 runs, first five are: 7b6c3a13:d698bad5-c883-4a5e-a88e-a34a5e74ad54\\n[2023-01-02 20:56:49Z] Completing processing run id d698bad5-c883-4a5e-a88e-a34a5e74ad54.\\n[2023-01-02 20:56:49Z] Submitting 1 runs, first five are: ac554bc4:61c437ce-e12a-4139-a9fd-5995881886fc\\n[2023-01-02 20:57:15Z] Completing processing run id 61c437ce-e12a-4139-a9fd-5995881886fc.\\n[2023-01-02 20:57:15Z] Submitting 1 runs, first five are: eb2c675f:47eaa3a4-286b-4306-8576-47092825d1cc\\n[2023-01-02 20:57:42Z] Completing processing run id 47eaa3a4-286b-4306-8576-47092825d1cc.\\n[2023-01-02 20:57:42Z] Submitting 1 runs, first five are: 00824321:6f902cf4-5f54-4cb5-8cc0-f7f32b68b10e\\n[2023-01-02 20:58:07Z] Completing processing run id 6f902cf4-5f54-4cb5-8cc0-f7f32b68b10e.\\n[2023-01-02 20:58:07Z] Submitting 1 runs, first five are: 8688b060:a7dbf2fc-2f04-4762-9cce-e7b503d1bf12\\n[2023-01-02 20:58:32Z] Completing processing run id a7dbf2fc-2f04-4762-9cce-e7b503d1bf12.\\n[2023-01-02 20:58:33Z] Submitting 1 runs, first five are: cadedd43:33fef505-de95-4b59-8b23-c5792e283e63\\n[2023-01-02 21:02:11Z] Completing processing run id 33fef505-de95-4b59-8b23-c5792e283e63.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"60797b18\": {\"node_id\": \"60797b18\", \"name\": \"green_taxi_data\"}, \"a48e00e5\": {\"node_id\": \"a48e00e5\", \"name\": \"yellow_taxi_data\"}}, \"module_nodes\": {\"cadedd43\": {\"node_id\": \"cadedd43\", \"name\": \"AutoML_Regression\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"33fef505-de95-4b59-8b23-c5792e283e63\"}, \"8688b060\": {\"node_id\": \"8688b060\", \"name\": \"Train Test Data Split\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"a7dbf2fc-2f04-4762-9cce-e7b503d1bf12\"}, \"00824321\": {\"node_id\": \"00824321\", \"name\": \"Transform Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"6f902cf4-5f54-4cb5-8cc0-f7f32b68b10e\"}, \"eb2c675f\": {\"node_id\": \"eb2c675f\", \"name\": \"Normalize Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"47eaa3a4-286b-4306-8576-47092825d1cc\"}, \"ac554bc4\": {\"node_id\": \"ac554bc4\", \"name\": \"Filter Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"61c437ce-e12a-4139-a9fd-5995881886fc\"}, \"7b6c3a13\": {\"node_id\": \"7b6c3a13\", \"name\": \"Merge Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"d698bad5-c883-4a5e-a88e-a34a5e74ad54\"}, \"46289648\": {\"node_id\": \"46289648\", \"name\": \"Cleanse Green Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"06755b0e-ea44-498c-afa0-56d11fc07192\"}, \"b21acb8a\": {\"node_id\": \"b21acb8a\", \"name\": \"Cleanse Yellow Taxi Data\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"74b011ce-9d07-4a10-99c1-4d7964e2a3b2\"}}, \"edges\": [{\"source_node_id\": \"8688b060\", \"source_node_name\": \"Train Test Data Split\", \"source_name\": \"output_split_train\", \"target_name\": \"training_data\", \"dst_node_id\": \"cadedd43\", \"dst_node_name\": \"AutoML_Regression\"}, {\"source_node_id\": \"00824321\", \"source_node_name\": \"Transform Taxi Data\", \"source_name\": \"transformed_data\", \"target_name\": \"transformed_data\", \"dst_node_id\": \"8688b060\", \"dst_node_name\": \"Train Test Data Split\"}, {\"source_node_id\": \"eb2c675f\", \"source_node_name\": \"Normalize Taxi Data\", \"source_name\": \"normalized_data\", \"target_name\": \"normalized_data\", \"dst_node_id\": \"00824321\", \"dst_node_name\": \"Transform Taxi Data\"}, {\"source_node_id\": \"ac554bc4\", \"source_node_name\": \"Filter Taxi Data\", \"source_name\": \"filtered_data\", \"target_name\": \"filtered_data\", \"dst_node_id\": \"eb2c675f\", \"dst_node_name\": \"Normalize Taxi Data\"}, {\"source_node_id\": \"7b6c3a13\", \"source_node_name\": \"Merge Taxi Data\", \"source_name\": \"merged_data\", \"target_name\": \"merged_data\", \"dst_node_id\": \"ac554bc4\", \"dst_node_name\": \"Filter Taxi Data\"}, {\"source_node_id\": \"46289648\", \"source_node_name\": \"Cleanse Green Taxi Data\", \"source_name\": \"cleansed_green_data\", \"target_name\": \"cleansed_green_data\", \"dst_node_id\": \"7b6c3a13\", \"dst_node_name\": \"Merge Taxi Data\"}, {\"source_node_id\": \"b21acb8a\", \"source_node_name\": \"Cleanse Yellow Taxi Data\", \"source_name\": \"cleansed_yellow_data\", \"target_name\": \"cleansed_green_data\", \"dst_node_id\": \"7b6c3a13\", \"dst_node_name\": \"Merge Taxi Data\"}, {\"source_node_id\": \"60797b18\", \"source_node_name\": \"green_taxi_data\", \"source_name\": \"data\", \"target_name\": \"raw_data\", \"dst_node_id\": \"46289648\", \"dst_node_name\": \"Cleanse Green Taxi Data\"}, {\"source_node_id\": \"a48e00e5\", \"source_node_name\": \"yellow_taxi_data\", \"source_name\": \"data\", \"target_name\": \"raw_data\", \"dst_node_id\": \"b21acb8a\", \"dst_node_name\": \"Cleanse Yellow Taxi Data\"}], \"child_runs\": [{\"run_id\": \"33fef505-de95-4b59-8b23-c5792e283e63\", \"name\": \"AutoML_Regression\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:58:46.934987Z\", \"created_time\": \"2023-01-02T20:58:33.112018Z\", \"end_time\": \"2023-01-02T21:02:04.187176Z\", \"duration\": \"0:03:31\", \"run_number\": 1672693113, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:58:33.112018Z\", \"is_reused\": \"\"}, {\"run_id\": \"a7dbf2fc-2f04-4762-9cce-e7b503d1bf12\", \"name\": \"Train Test Data Split\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:58:12.867429Z\", \"created_time\": \"2023-01-02T20:58:08.524166Z\", \"end_time\": \"2023-01-02T20:58:32.145396Z\", \"duration\": \"0:00:23\", \"run_number\": 1672693088, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:58:08.524166Z\", \"is_reused\": \"\"}, {\"run_id\": \"6f902cf4-5f54-4cb5-8cc0-f7f32b68b10e\", \"name\": \"Transform Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:57:47.493759Z\", \"created_time\": \"2023-01-02T20:57:43.303435Z\", \"end_time\": \"2023-01-02T20:58:06.318659Z\", \"duration\": \"0:00:23\", \"run_number\": 1672693063, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:57:43.303435Z\", \"is_reused\": \"\"}, {\"run_id\": \"47eaa3a4-286b-4306-8576-47092825d1cc\", \"name\": \"Normalize Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:57:22.179666Z\", \"created_time\": \"2023-01-02T20:57:16.618108Z\", \"end_time\": \"2023-01-02T20:57:41.400284Z\", \"duration\": \"0:00:24\", \"run_number\": 1672693036, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:57:16.618108Z\", \"is_reused\": \"\"}, {\"run_id\": \"61c437ce-e12a-4139-a9fd-5995881886fc\", \"name\": \"Filter Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:55.997096Z\", \"created_time\": \"2023-01-02T20:56:50.303108Z\", \"end_time\": \"2023-01-02T20:57:14.692579Z\", \"duration\": \"0:00:24\", \"run_number\": 1672693010, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:56:50.303108Z\", \"is_reused\": \"\"}, {\"run_id\": \"d698bad5-c883-4a5e-a88e-a34a5e74ad54\", \"name\": \"Merge Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:29.641791Z\", \"created_time\": \"2023-01-02T20:56:25.773327Z\", \"end_time\": \"2023-01-02T20:56:48.408021Z\", \"duration\": \"0:00:22\", \"run_number\": 1672692985, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:56:25.773327Z\", \"is_reused\": \"\"}, {\"run_id\": \"06755b0e-ea44-498c-afa0-56d11fc07192\", \"name\": \"Cleanse Green Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:54:50.029252Z\", \"created_time\": \"2023-01-02T20:41:25.552625Z\", \"end_time\": \"2023-01-02T20:56:01.777636Z\", \"duration\": \"0:14:36\", \"run_number\": 1672692085, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:41:25.552625Z\", \"is_reused\": \"\"}, {\"run_id\": \"74b011ce-9d07-4a10-99c1-4d7964e2a3b2\", \"name\": \"Cleanse Yellow Taxi Data\", \"status\": \"Finished\", \"start_time\": \"2023-01-02T20:56:04.711684Z\", \"created_time\": \"2023-01-02T20:41:25.209021Z\", \"end_time\": \"2023-01-02T20:56:23.320807Z\", \"duration\": \"0:14:58\", \"run_number\": 1672692085, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2023-01-02T20:41:25.209021Z\", \"is_reused\": \"\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.47.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 36,
      "metadata": {
        "gather": {
          "logged": 1672692108101
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Explore the results"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Before we proceed we need to wait for the run to complete.\n",
        "pipeline_run.wait_for_completion(show_output=False)\n",
        "\n",
        "# functions to download output to local and fetch as dataframe\n",
        "def get_download_path(download_path, output_name):\n",
        "    output_folder = os.listdir(download_path + '/azureml')[0]\n",
        "    path =  download_path + '/azureml/' + output_folder + '/' + output_name\n",
        "    return path\n",
        "\n",
        "def fetch_df(current_step, output_name):\n",
        "    output_data = current_step.get_output_data(output_name)    \n",
        "    download_path = './outputs/' + output_name\n",
        "    output_data.download(download_path, overwrite=True)\n",
        "    df_path = get_download_path(download_path, output_name) + '/processed.parquet'\n",
        "    return pd.read_parquet(df_path) "
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "PipelineRunId: 622ac3f5-a1d9-4514-a00e-f6234bba6d00\nLink to Azure Machine Learning Portal: https://ml.azure.com/runs/622ac3f5-a1d9-4514-a00e-f6234bba6d00?wsid=/subscriptions/2c56960a-079e-42e0-9944-76091405ea34/resourcegroups/mlopsvn/workspaces/mlopsvn-ws&tid=16cfc3dc-514c-42b0-ac64-e8a989f753c5\n"
        }
      ],
      "execution_count": 38,
      "metadata": {
        "gather": {
          "logged": 1672693404438
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View cleansed taxi data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "green_cleanse_step = pipeline_run.find_step_run(cleansingStepGreen.name)[0]\n",
        "yellow_cleanse_step = pipeline_run.find_step_run(cleansingStepYellow.name)[0]\n",
        "\n",
        "cleansed_green_df = fetch_df(green_cleanse_step, cleansed_green_data.name)\n",
        "cleansed_yellow_df = fetch_df(yellow_cleanse_step, cleansed_yellow_data.name)\n",
        "\n",
        "display(cleansed_green_df.head(5))\n",
        "display(cleansed_yellow_df.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost  distance    dropoff_datetime  dropoff_latitude  dropoff_longitude  \\\n0  12.0      2.86 2016-02-12 19:02:24         40.723488         -73.996658   \n1  14.0      3.80 2016-02-26 10:39:05         40.715118         -73.992966   \n2  15.0      2.20 2016-02-28 17:28:17         40.752213         -73.859955   \n3   8.0      1.34 2016-02-15 15:23:16         40.821838         -73.951073   \n4   9.0      1.30 2016-02-24 13:17:11         40.846977         -73.931793   \n\n   passengers     pickup_datetime  pickup_latitude  pickup_longitude  \\\n0           1 2016-02-12 18:48:43        40.693199        -73.990913   \n1           1 2016-02-26 10:24:08        40.684837        -73.954231   \n2           1 2016-02-28 17:06:51        40.733150        -73.863884   \n3           1 2016-02-15 15:14:57        40.805145        -73.962639   \n4           1 2016-02-24 13:16:43        40.846954        -73.931923   \n\n   store_forward  vendor  \n0          False       2  \n1          False       1  \n2          False       2  \n3          False       2  \n4          False       1  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_datetime</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_datetime</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>store_forward</th>\n      <th>vendor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.0</td>\n      <td>2.86</td>\n      <td>2016-02-12 19:02:24</td>\n      <td>40.723488</td>\n      <td>-73.996658</td>\n      <td>1</td>\n      <td>2016-02-12 18:48:43</td>\n      <td>40.693199</td>\n      <td>-73.990913</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14.0</td>\n      <td>3.80</td>\n      <td>2016-02-26 10:39:05</td>\n      <td>40.715118</td>\n      <td>-73.992966</td>\n      <td>1</td>\n      <td>2016-02-26 10:24:08</td>\n      <td>40.684837</td>\n      <td>-73.954231</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15.0</td>\n      <td>2.20</td>\n      <td>2016-02-28 17:28:17</td>\n      <td>40.752213</td>\n      <td>-73.859955</td>\n      <td>1</td>\n      <td>2016-02-28 17:06:51</td>\n      <td>40.733150</td>\n      <td>-73.863884</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.0</td>\n      <td>1.34</td>\n      <td>2016-02-15 15:23:16</td>\n      <td>40.821838</td>\n      <td>-73.951073</td>\n      <td>1</td>\n      <td>2016-02-15 15:14:57</td>\n      <td>40.805145</td>\n      <td>-73.962639</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.0</td>\n      <td>1.30</td>\n      <td>2016-02-24 13:17:11</td>\n      <td>40.846977</td>\n      <td>-73.931793</td>\n      <td>1</td>\n      <td>2016-02-24 13:16:43</td>\n      <td>40.846954</td>\n      <td>-73.931923</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost  distance    dropoff_datetime  dropoff_latitude  dropoff_longitude  \\\n0  34.5     11.78 2016-02-01 01:13:17         40.692150         -73.954742   \n1  10.5      1.37 2016-02-02 12:31:04         40.755470         -73.975296   \n2  21.0      5.60 2016-02-02 22:13:18         40.749142         -73.992256   \n3  27.5      9.60 2016-02-18 10:52:36         40.770863         -73.865555   \n4   3.5      0.50 2016-02-12 08:46:11         40.719940         -74.003967   \n\n   passengers     pickup_datetime  pickup_latitude  pickup_longitude  \\\n0           1 2016-02-01 00:44:13        40.646481        -73.789841   \n1           1 2016-02-02 12:15:51        40.750072        -73.991432   \n2           1 2016-02-02 21:48:35        40.679806        -73.981300   \n3           2 2016-02-18 10:32:55        40.750710        -73.973747   \n4           1 2016-02-12 08:44:22        40.712730        -74.009026   \n\n   store_forward  vendor  \n0          False       2  \n1          False       2  \n2          False       1  \n3          False       2  \n4          False       1  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_datetime</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_datetime</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>store_forward</th>\n      <th>vendor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>34.5</td>\n      <td>11.78</td>\n      <td>2016-02-01 01:13:17</td>\n      <td>40.692150</td>\n      <td>-73.954742</td>\n      <td>1</td>\n      <td>2016-02-01 00:44:13</td>\n      <td>40.646481</td>\n      <td>-73.789841</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.5</td>\n      <td>1.37</td>\n      <td>2016-02-02 12:31:04</td>\n      <td>40.755470</td>\n      <td>-73.975296</td>\n      <td>1</td>\n      <td>2016-02-02 12:15:51</td>\n      <td>40.750072</td>\n      <td>-73.991432</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.0</td>\n      <td>5.60</td>\n      <td>2016-02-02 22:13:18</td>\n      <td>40.749142</td>\n      <td>-73.992256</td>\n      <td>1</td>\n      <td>2016-02-02 21:48:35</td>\n      <td>40.679806</td>\n      <td>-73.981300</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>27.5</td>\n      <td>9.60</td>\n      <td>2016-02-18 10:52:36</td>\n      <td>40.770863</td>\n      <td>-73.865555</td>\n      <td>2</td>\n      <td>2016-02-18 10:32:55</td>\n      <td>40.750710</td>\n      <td>-73.973747</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.5</td>\n      <td>0.50</td>\n      <td>2016-02-12 08:46:11</td>\n      <td>40.719940</td>\n      <td>-74.003967</td>\n      <td>1</td>\n      <td>2016-02-12 08:44:22</td>\n      <td>40.712730</td>\n      <td>-74.009026</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 39,
      "metadata": {
        "gather": {
          "logged": 1672693412178
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View the combined taxi data profile"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "merge_step = pipeline_run.find_step_run(mergingStep.name)[0]\n",
        "combined_df = fetch_df(merge_step, merged_data.name)\n",
        "\n",
        "display(combined_df.describe())"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "              cost     distance  dropoff_latitude  dropoff_longitude  \\\ncount  5500.000000  5500.000000       5500.000000        5500.000000   \nmean     11.729162     2.725264         40.561154         -73.602903   \nstd       8.775094     2.809248          2.741691           4.974321   \nmin      -6.500000     0.000000          0.000000         -74.182564   \n25%       6.000000     1.000000         40.699713         -73.973799   \n50%       9.000000     1.770000         40.747684         -73.949280   \n75%      14.500000     3.410000         40.787232         -73.915682   \nmax     100.000000    46.100000         40.964470           0.000000   \n\n        passengers  pickup_latitude  pickup_longitude       vendor  \ncount  5500.000000      5500.000000       5500.000000  5500.000000  \nmean      1.383273        40.570558        -73.617736     1.761091  \nstd       1.064911         2.686679          4.874302     0.426456  \nmin       0.000000         0.000000        -74.032356     1.000000  \n25%       1.000000        40.699862        -73.966038     2.000000  \n50%       1.000000        40.746834        -73.949535     2.000000  \n75%       1.000000        40.798795        -73.921446     2.000000  \nmax       6.000000        40.943756          0.000000     2.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>vendor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n      <td>5500.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>11.729162</td>\n      <td>2.725264</td>\n      <td>40.561154</td>\n      <td>-73.602903</td>\n      <td>1.383273</td>\n      <td>40.570558</td>\n      <td>-73.617736</td>\n      <td>1.761091</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.775094</td>\n      <td>2.809248</td>\n      <td>2.741691</td>\n      <td>4.974321</td>\n      <td>1.064911</td>\n      <td>2.686679</td>\n      <td>4.874302</td>\n      <td>0.426456</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-6.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-74.182564</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-74.032356</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>6.000000</td>\n      <td>1.000000</td>\n      <td>40.699713</td>\n      <td>-73.973799</td>\n      <td>1.000000</td>\n      <td>40.699862</td>\n      <td>-73.966038</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.000000</td>\n      <td>1.770000</td>\n      <td>40.747684</td>\n      <td>-73.949280</td>\n      <td>1.000000</td>\n      <td>40.746834</td>\n      <td>-73.949535</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>14.500000</td>\n      <td>3.410000</td>\n      <td>40.787232</td>\n      <td>-73.915682</td>\n      <td>1.000000</td>\n      <td>40.798795</td>\n      <td>-73.921446</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>100.000000</td>\n      <td>46.100000</td>\n      <td>40.964470</td>\n      <td>0.000000</td>\n      <td>6.000000</td>\n      <td>40.943756</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 40,
      "metadata": {
        "gather": {
          "logged": 1672693422054
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View the filtered taxi data profile"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "filter_step = pipeline_run.find_step_run(filterStep.name)[0]\n",
        "filtered_df = fetch_df(filter_step, filtered_data.name)\n",
        "\n",
        "display(filtered_df.describe())"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "              cost     distance  dropoff_latitude  dropoff_longitude  \\\ncount  5422.000000  5422.000000       5422.000000        5422.000000   \nmean     11.654683     2.707739         40.745376         -73.939589   \nstd       8.657187     2.777005          0.055033           0.048818   \nmin      -6.500000     0.000000         40.566837         -74.182564   \n25%       6.000000     1.002500         40.700033         -73.974318   \n50%       9.000000     1.770000         40.747561         -73.949741   \n75%      14.000000     3.400000         40.786365         -73.917582   \nmax     100.000000    46.100000         40.879570         -73.725159   \n\n        passengers  pickup_latitude  pickup_longitude       vendor  \ncount  5422.000000      5422.000000       5422.000000  5422.000000  \nmean      1.384913        40.747580        -73.940750     1.762818  \nstd       1.068549         0.054639          0.042504     0.425394  \nmin       0.000000        40.575939        -74.032356     1.000000  \n25%       1.000000        40.700034        -73.966272     2.000000  \n50%       1.000000        40.746801        -73.949867     2.000000  \n75%       1.000000        40.798141        -73.921871     2.000000  \nmax       6.000000        40.879898        -73.738998     2.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>vendor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n      <td>5422.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>11.654683</td>\n      <td>2.707739</td>\n      <td>40.745376</td>\n      <td>-73.939589</td>\n      <td>1.384913</td>\n      <td>40.747580</td>\n      <td>-73.940750</td>\n      <td>1.762818</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.657187</td>\n      <td>2.777005</td>\n      <td>0.055033</td>\n      <td>0.048818</td>\n      <td>1.068549</td>\n      <td>0.054639</td>\n      <td>0.042504</td>\n      <td>0.425394</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-6.500000</td>\n      <td>0.000000</td>\n      <td>40.566837</td>\n      <td>-74.182564</td>\n      <td>0.000000</td>\n      <td>40.575939</td>\n      <td>-74.032356</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>6.000000</td>\n      <td>1.002500</td>\n      <td>40.700033</td>\n      <td>-73.974318</td>\n      <td>1.000000</td>\n      <td>40.700034</td>\n      <td>-73.966272</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.000000</td>\n      <td>1.770000</td>\n      <td>40.747561</td>\n      <td>-73.949741</td>\n      <td>1.000000</td>\n      <td>40.746801</td>\n      <td>-73.949867</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>14.000000</td>\n      <td>3.400000</td>\n      <td>40.786365</td>\n      <td>-73.917582</td>\n      <td>1.000000</td>\n      <td>40.798141</td>\n      <td>-73.921871</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>100.000000</td>\n      <td>46.100000</td>\n      <td>40.879570</td>\n      <td>-73.725159</td>\n      <td>6.000000</td>\n      <td>40.879898</td>\n      <td>-73.738998</td>\n      <td>2.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 41,
      "metadata": {
        "gather": {
          "logged": 1672693424493
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View normalized taxi data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "normalize_step = pipeline_run.find_step_run(normalizeStep.name)[0]\n",
        "normalized_df = fetch_df(normalize_step, normalized_data.name)\n",
        "\n",
        "display(normalized_df.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost  distance  dropoff_latitude  dropoff_longitude  passengers  \\\n0  12.0      2.86         40.723488         -73.996658           1   \n1  14.0      3.80         40.715118         -73.992966           1   \n2  15.0      2.20         40.752213         -73.859955           1   \n3   8.0      1.34         40.821838         -73.951073           1   \n4   9.0      1.30         40.846977         -73.931793           1   \n\n   pickup_latitude  pickup_longitude  store_forward  vendor pickup_date  \\\n0        40.693199        -73.990913          False       2  2016-02-12   \n1        40.684837        -73.954231          False       1  2016-02-26   \n2        40.733150        -73.863884          False       2  2016-02-28   \n3        40.805145        -73.962639          False       2  2016-02-15   \n4        40.846954        -73.931923          False       1  2016-02-24   \n\n   pickup_time dropoff_date  dropoff_time  \n0  67723000000   2016-02-12   68544000000  \n1  37448000000   2016-02-26   38345000000  \n2  61611000000   2016-02-28   62897000000  \n3  54897000000   2016-02-15   55396000000  \n4  47803000000   2016-02-24   47831000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>store_forward</th>\n      <th>vendor</th>\n      <th>pickup_date</th>\n      <th>pickup_time</th>\n      <th>dropoff_date</th>\n      <th>dropoff_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.0</td>\n      <td>2.86</td>\n      <td>40.723488</td>\n      <td>-73.996658</td>\n      <td>1</td>\n      <td>40.693199</td>\n      <td>-73.990913</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2016-02-12</td>\n      <td>67723000000</td>\n      <td>2016-02-12</td>\n      <td>68544000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14.0</td>\n      <td>3.80</td>\n      <td>40.715118</td>\n      <td>-73.992966</td>\n      <td>1</td>\n      <td>40.684837</td>\n      <td>-73.954231</td>\n      <td>False</td>\n      <td>1</td>\n      <td>2016-02-26</td>\n      <td>37448000000</td>\n      <td>2016-02-26</td>\n      <td>38345000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15.0</td>\n      <td>2.20</td>\n      <td>40.752213</td>\n      <td>-73.859955</td>\n      <td>1</td>\n      <td>40.733150</td>\n      <td>-73.863884</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2016-02-28</td>\n      <td>61611000000</td>\n      <td>2016-02-28</td>\n      <td>62897000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.0</td>\n      <td>1.34</td>\n      <td>40.821838</td>\n      <td>-73.951073</td>\n      <td>1</td>\n      <td>40.805145</td>\n      <td>-73.962639</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2016-02-15</td>\n      <td>54897000000</td>\n      <td>2016-02-15</td>\n      <td>55396000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.0</td>\n      <td>1.30</td>\n      <td>40.846977</td>\n      <td>-73.931793</td>\n      <td>1</td>\n      <td>40.846954</td>\n      <td>-73.931923</td>\n      <td>False</td>\n      <td>1</td>\n      <td>2016-02-24</td>\n      <td>47803000000</td>\n      <td>2016-02-24</td>\n      <td>47831000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 42,
      "metadata": {
        "gather": {
          "logged": 1672693426965
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View transformed taxi data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "transform_step = pipeline_run.find_step_run(transformStep.name)[0]\n",
        "transformed_df = fetch_df(transform_step, transformed_data.name)\n",
        "\n",
        "display(transformed_df.describe())\n",
        "display(transformed_df.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "              cost     distance  dropoff_latitude  dropoff_longitude  \\\ncount  5362.000000  5362.000000       5362.000000        5362.000000   \nmean     11.675526     2.733525         40.745305         -73.939781   \nstd       8.463887     2.778446          0.054966           0.048733   \nmin       0.010000     0.010000         40.566837         -74.182564   \n25%       6.000000     1.030000         40.700006         -73.974482   \n50%       9.000000     1.790000         40.747463         -73.949867   \n75%      14.000000     3.400000         40.786345         -73.917900   \nmax     100.000000    46.100000         40.879570         -73.725159   \n\n        passengers  pickup_latitude  pickup_longitude       vendor  \\\ncount  5362.000000      5362.000000       5362.000000  5362.000000   \nmean      1.387728        40.747519        -73.940981     1.764081   \nstd       1.073229         0.054586          0.042325     0.424612   \nmin       0.000000        40.575939        -74.032356     1.000000   \n25%       1.000000        40.699983        -73.966331     2.000000   \n50%       1.000000        40.746784        -73.949997     2.000000   \n75%       1.000000        40.798115        -73.922247     2.000000   \nmax       6.000000        40.879898        -73.738998     2.000000   \n\n       pickup_weekday  pickup_month  pickup_monthday  dropoff_weekday  \\\ncount     5362.000000        5362.0      5362.000000      5362.000000   \nmean         3.241328           2.0        14.917568         3.240582   \nstd          1.970578           0.0         8.056895         1.974547   \nmin          0.000000           2.0         1.000000         0.000000   \n25%          2.000000           2.0         8.000000         2.000000   \n50%          3.000000           2.0        15.000000         3.000000   \n75%          5.000000           2.0        22.000000         5.000000   \nmax          6.000000           2.0        28.000000         6.000000   \n\n       dropoff_month  dropoff_monthday  pickup_hour  pickup_minute  \\\ncount         5362.0       5362.000000  5362.000000    5362.000000   \nmean             2.0         14.932488    13.676986      29.192838   \nstd              0.0          8.058353     6.666693      17.153371   \nmin              2.0          1.000000     0.000000       0.000000   \n25%              2.0          8.000000     9.000000      15.000000   \n50%              2.0         15.000000    15.000000      29.000000   \n75%              2.0         22.000000    19.000000      44.000000   \nmax              2.0         29.000000    23.000000      59.000000   \n\n       pickup_second  dropoff_hour  dropoff_minute  dropoff_second  \ncount    5362.000000   5362.000000     5362.000000     5362.000000  \nmean       29.505968     13.630548       29.707572       29.496830  \nstd        17.293317      6.765493       17.409630       17.316547  \nmin         0.000000      0.000000        0.000000        0.000000  \n25%        15.000000      9.000000       15.000000       15.000000  \n50%        29.000000     15.000000       30.000000       29.000000  \n75%        44.000000     19.000000       45.000000       44.000000  \nmax        59.000000     23.000000       59.000000       59.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>vendor</th>\n      <th>pickup_weekday</th>\n      <th>pickup_month</th>\n      <th>pickup_monthday</th>\n      <th>dropoff_weekday</th>\n      <th>dropoff_month</th>\n      <th>dropoff_monthday</th>\n      <th>pickup_hour</th>\n      <th>pickup_minute</th>\n      <th>pickup_second</th>\n      <th>dropoff_hour</th>\n      <th>dropoff_minute</th>\n      <th>dropoff_second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.0</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.0</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n      <td>5362.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>11.675526</td>\n      <td>2.733525</td>\n      <td>40.745305</td>\n      <td>-73.939781</td>\n      <td>1.387728</td>\n      <td>40.747519</td>\n      <td>-73.940981</td>\n      <td>1.764081</td>\n      <td>3.241328</td>\n      <td>2.0</td>\n      <td>14.917568</td>\n      <td>3.240582</td>\n      <td>2.0</td>\n      <td>14.932488</td>\n      <td>13.676986</td>\n      <td>29.192838</td>\n      <td>29.505968</td>\n      <td>13.630548</td>\n      <td>29.707572</td>\n      <td>29.496830</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.463887</td>\n      <td>2.778446</td>\n      <td>0.054966</td>\n      <td>0.048733</td>\n      <td>1.073229</td>\n      <td>0.054586</td>\n      <td>0.042325</td>\n      <td>0.424612</td>\n      <td>1.970578</td>\n      <td>0.0</td>\n      <td>8.056895</td>\n      <td>1.974547</td>\n      <td>0.0</td>\n      <td>8.058353</td>\n      <td>6.666693</td>\n      <td>17.153371</td>\n      <td>17.293317</td>\n      <td>6.765493</td>\n      <td>17.409630</td>\n      <td>17.316547</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.010000</td>\n      <td>0.010000</td>\n      <td>40.566837</td>\n      <td>-74.182564</td>\n      <td>0.000000</td>\n      <td>40.575939</td>\n      <td>-74.032356</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>6.000000</td>\n      <td>1.030000</td>\n      <td>40.700006</td>\n      <td>-73.974482</td>\n      <td>1.000000</td>\n      <td>40.699983</td>\n      <td>-73.966331</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>2.0</td>\n      <td>8.000000</td>\n      <td>2.000000</td>\n      <td>2.0</td>\n      <td>8.000000</td>\n      <td>9.000000</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n      <td>9.000000</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.000000</td>\n      <td>1.790000</td>\n      <td>40.747463</td>\n      <td>-73.949867</td>\n      <td>1.000000</td>\n      <td>40.746784</td>\n      <td>-73.949997</td>\n      <td>2.000000</td>\n      <td>3.000000</td>\n      <td>2.0</td>\n      <td>15.000000</td>\n      <td>3.000000</td>\n      <td>2.0</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n      <td>29.000000</td>\n      <td>29.000000</td>\n      <td>15.000000</td>\n      <td>30.000000</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>14.000000</td>\n      <td>3.400000</td>\n      <td>40.786345</td>\n      <td>-73.917900</td>\n      <td>1.000000</td>\n      <td>40.798115</td>\n      <td>-73.922247</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>2.0</td>\n      <td>22.000000</td>\n      <td>5.000000</td>\n      <td>2.0</td>\n      <td>22.000000</td>\n      <td>19.000000</td>\n      <td>44.000000</td>\n      <td>44.000000</td>\n      <td>19.000000</td>\n      <td>45.000000</td>\n      <td>44.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>100.000000</td>\n      <td>46.100000</td>\n      <td>40.879570</td>\n      <td>-73.725159</td>\n      <td>6.000000</td>\n      <td>40.879898</td>\n      <td>-73.738998</td>\n      <td>2.000000</td>\n      <td>6.000000</td>\n      <td>2.0</td>\n      <td>28.000000</td>\n      <td>6.000000</td>\n      <td>2.0</td>\n      <td>29.000000</td>\n      <td>23.000000</td>\n      <td>59.000000</td>\n      <td>59.000000</td>\n      <td>23.000000</td>\n      <td>59.000000</td>\n      <td>59.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost  distance  dropoff_latitude  dropoff_longitude  passengers  \\\n0  12.0      2.86         40.723488         -73.996658           1   \n1  14.0      3.80         40.715118         -73.992966           1   \n2  15.0      2.20         40.752213         -73.859955           1   \n3   8.0      1.34         40.821838         -73.951073           1   \n4   9.0      1.30         40.846977         -73.931793           1   \n\n   pickup_latitude  pickup_longitude  store_forward  vendor  pickup_weekday  \\\n0        40.693199        -73.990913          False       2               4   \n1        40.684837        -73.954231          False       1               4   \n2        40.733150        -73.863884          False       2               6   \n3        40.805145        -73.962639          False       2               0   \n4        40.846954        -73.931923          False       1               2   \n\n   ...  pickup_monthday  dropoff_weekday  dropoff_month  dropoff_monthday  \\\n0  ...               12                4              2                12   \n1  ...               26                4              2                26   \n2  ...               28                6              2                28   \n3  ...               15                0              2                15   \n4  ...               24                2              2                24   \n\n   pickup_hour  pickup_minute  pickup_second  dropoff_hour  dropoff_minute  \\\n0           18             48             43            19               2   \n1           10             24              8            10              39   \n2           17              6             51            17              28   \n3           15             14             57            15              23   \n4           13             16             43            13              17   \n\n   dropoff_second  \n0              24  \n1               5  \n2              17  \n3              16  \n4              11  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>store_forward</th>\n      <th>vendor</th>\n      <th>pickup_weekday</th>\n      <th>...</th>\n      <th>pickup_monthday</th>\n      <th>dropoff_weekday</th>\n      <th>dropoff_month</th>\n      <th>dropoff_monthday</th>\n      <th>pickup_hour</th>\n      <th>pickup_minute</th>\n      <th>pickup_second</th>\n      <th>dropoff_hour</th>\n      <th>dropoff_minute</th>\n      <th>dropoff_second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.0</td>\n      <td>2.86</td>\n      <td>40.723488</td>\n      <td>-73.996658</td>\n      <td>1</td>\n      <td>40.693199</td>\n      <td>-73.990913</td>\n      <td>False</td>\n      <td>2</td>\n      <td>4</td>\n      <td>...</td>\n      <td>12</td>\n      <td>4</td>\n      <td>2</td>\n      <td>12</td>\n      <td>18</td>\n      <td>48</td>\n      <td>43</td>\n      <td>19</td>\n      <td>2</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14.0</td>\n      <td>3.80</td>\n      <td>40.715118</td>\n      <td>-73.992966</td>\n      <td>1</td>\n      <td>40.684837</td>\n      <td>-73.954231</td>\n      <td>False</td>\n      <td>1</td>\n      <td>4</td>\n      <td>...</td>\n      <td>26</td>\n      <td>4</td>\n      <td>2</td>\n      <td>26</td>\n      <td>10</td>\n      <td>24</td>\n      <td>8</td>\n      <td>10</td>\n      <td>39</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15.0</td>\n      <td>2.20</td>\n      <td>40.752213</td>\n      <td>-73.859955</td>\n      <td>1</td>\n      <td>40.733150</td>\n      <td>-73.863884</td>\n      <td>False</td>\n      <td>2</td>\n      <td>6</td>\n      <td>...</td>\n      <td>28</td>\n      <td>6</td>\n      <td>2</td>\n      <td>28</td>\n      <td>17</td>\n      <td>6</td>\n      <td>51</td>\n      <td>17</td>\n      <td>28</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.0</td>\n      <td>1.34</td>\n      <td>40.821838</td>\n      <td>-73.951073</td>\n      <td>1</td>\n      <td>40.805145</td>\n      <td>-73.962639</td>\n      <td>False</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>15</td>\n      <td>0</td>\n      <td>2</td>\n      <td>15</td>\n      <td>15</td>\n      <td>14</td>\n      <td>57</td>\n      <td>15</td>\n      <td>23</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.0</td>\n      <td>1.30</td>\n      <td>40.846977</td>\n      <td>-73.931793</td>\n      <td>1</td>\n      <td>40.846954</td>\n      <td>-73.931923</td>\n      <td>False</td>\n      <td>1</td>\n      <td>2</td>\n      <td>...</td>\n      <td>24</td>\n      <td>2</td>\n      <td>2</td>\n      <td>24</td>\n      <td>13</td>\n      <td>16</td>\n      <td>43</td>\n      <td>13</td>\n      <td>17</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 43,
      "metadata": {
        "gather": {
          "logged": 1672693429699
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View training data used by AutoML"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "split_step = pipeline_run.find_step_run(testTrainSplitStep.name)[0]\n",
        "train_split = fetch_df(split_step, output_split_train.name)\n",
        "\n",
        "display(train_split.describe())\n",
        "display(train_split.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "              cost     distance  dropoff_latitude  dropoff_longitude  \\\ncount  4289.000000  4289.000000       4289.000000        4289.000000   \nmean     11.632803     2.714276         40.745904         -73.939768   \nstd       8.454355     2.696857          0.055180           0.048523   \nmin       0.010000     0.010000         40.566837         -74.182564   \n25%       6.000000     1.040000         40.700569         -73.974129   \n50%       9.000000     1.780000         40.747822         -73.949944   \n75%      14.000000     3.400000         40.787579         -73.917831   \nmax     100.000000    26.640000         40.879520         -73.726120   \n\n        passengers  pickup_latitude  pickup_longitude       vendor  \\\ncount  4289.000000      4289.000000       4289.000000  4289.000000   \nmean      1.385638        40.748239        -73.940715     1.764514   \nstd       1.072267         0.054818          0.042378     0.424352   \nmin       0.000000        40.575939        -74.032356     1.000000   \n25%       1.000000        40.700275        -73.966309     2.000000   \n50%       1.000000        40.746883        -73.949722     2.000000   \n75%       1.000000        40.798874        -73.922081     2.000000   \nmax       6.000000        40.879898        -73.738998     2.000000   \n\n       pickup_weekday  pickup_month  pickup_monthday  dropoff_weekday  \\\ncount     4289.000000        4289.0      4289.000000      4289.000000   \nmean         3.246211           2.0        14.911868         3.248310   \nstd          1.961738           0.0         8.039065         1.965333   \nmin          0.000000           2.0         1.000000         0.000000   \n25%          2.000000           2.0         8.000000         2.000000   \n50%          3.000000           2.0        15.000000         3.000000   \n75%          5.000000           2.0        22.000000         5.000000   \nmax          6.000000           2.0        28.000000         6.000000   \n\n       dropoff_month  dropoff_monthday  pickup_hour  pickup_minute  \\\ncount         4289.0       4289.000000  4289.000000    4289.000000   \nmean             2.0         14.927023    13.695500      29.216367   \nstd              0.0          8.039724     6.657084      17.138832   \nmin              2.0          1.000000     0.000000       0.000000   \n25%              2.0          8.000000     9.000000      15.000000   \n50%              2.0         15.000000    15.000000      29.000000   \n75%              2.0         22.000000    19.000000      44.000000   \nmax              2.0         29.000000    23.000000      59.000000   \n\n       pickup_second  dropoff_hour  dropoff_minute  dropoff_second  \ncount    4289.000000   4289.000000     4289.000000     4289.000000  \nmean       29.482863     13.650968       29.588016       29.298671  \nstd        17.354156      6.759883       17.450055       17.303254  \nmin         0.000000      0.000000        0.000000        0.000000  \n25%        15.000000      9.000000       15.000000       15.000000  \n50%        30.000000     15.000000       30.000000       29.000000  \n75%        44.000000     19.000000       45.000000       44.000000  \nmax        59.000000     23.000000       59.000000       59.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>vendor</th>\n      <th>pickup_weekday</th>\n      <th>pickup_month</th>\n      <th>pickup_monthday</th>\n      <th>dropoff_weekday</th>\n      <th>dropoff_month</th>\n      <th>dropoff_monthday</th>\n      <th>pickup_hour</th>\n      <th>pickup_minute</th>\n      <th>pickup_second</th>\n      <th>dropoff_hour</th>\n      <th>dropoff_minute</th>\n      <th>dropoff_second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.0</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.0</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n      <td>4289.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>11.632803</td>\n      <td>2.714276</td>\n      <td>40.745904</td>\n      <td>-73.939768</td>\n      <td>1.385638</td>\n      <td>40.748239</td>\n      <td>-73.940715</td>\n      <td>1.764514</td>\n      <td>3.246211</td>\n      <td>2.0</td>\n      <td>14.911868</td>\n      <td>3.248310</td>\n      <td>2.0</td>\n      <td>14.927023</td>\n      <td>13.695500</td>\n      <td>29.216367</td>\n      <td>29.482863</td>\n      <td>13.650968</td>\n      <td>29.588016</td>\n      <td>29.298671</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.454355</td>\n      <td>2.696857</td>\n      <td>0.055180</td>\n      <td>0.048523</td>\n      <td>1.072267</td>\n      <td>0.054818</td>\n      <td>0.042378</td>\n      <td>0.424352</td>\n      <td>1.961738</td>\n      <td>0.0</td>\n      <td>8.039065</td>\n      <td>1.965333</td>\n      <td>0.0</td>\n      <td>8.039724</td>\n      <td>6.657084</td>\n      <td>17.138832</td>\n      <td>17.354156</td>\n      <td>6.759883</td>\n      <td>17.450055</td>\n      <td>17.303254</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.010000</td>\n      <td>0.010000</td>\n      <td>40.566837</td>\n      <td>-74.182564</td>\n      <td>0.000000</td>\n      <td>40.575939</td>\n      <td>-74.032356</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>6.000000</td>\n      <td>1.040000</td>\n      <td>40.700569</td>\n      <td>-73.974129</td>\n      <td>1.000000</td>\n      <td>40.700275</td>\n      <td>-73.966309</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>2.0</td>\n      <td>8.000000</td>\n      <td>2.000000</td>\n      <td>2.0</td>\n      <td>8.000000</td>\n      <td>9.000000</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n      <td>9.000000</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.000000</td>\n      <td>1.780000</td>\n      <td>40.747822</td>\n      <td>-73.949944</td>\n      <td>1.000000</td>\n      <td>40.746883</td>\n      <td>-73.949722</td>\n      <td>2.000000</td>\n      <td>3.000000</td>\n      <td>2.0</td>\n      <td>15.000000</td>\n      <td>3.000000</td>\n      <td>2.0</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n      <td>29.000000</td>\n      <td>30.000000</td>\n      <td>15.000000</td>\n      <td>30.000000</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>14.000000</td>\n      <td>3.400000</td>\n      <td>40.787579</td>\n      <td>-73.917831</td>\n      <td>1.000000</td>\n      <td>40.798874</td>\n      <td>-73.922081</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>2.0</td>\n      <td>22.000000</td>\n      <td>5.000000</td>\n      <td>2.0</td>\n      <td>22.000000</td>\n      <td>19.000000</td>\n      <td>44.000000</td>\n      <td>44.000000</td>\n      <td>19.000000</td>\n      <td>45.000000</td>\n      <td>44.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>100.000000</td>\n      <td>26.640000</td>\n      <td>40.879520</td>\n      <td>-73.726120</td>\n      <td>6.000000</td>\n      <td>40.879898</td>\n      <td>-73.738998</td>\n      <td>2.000000</td>\n      <td>6.000000</td>\n      <td>2.0</td>\n      <td>28.000000</td>\n      <td>6.000000</td>\n      <td>2.0</td>\n      <td>29.000000</td>\n      <td>23.000000</td>\n      <td>59.000000</td>\n      <td>59.000000</td>\n      <td>23.000000</td>\n      <td>59.000000</td>\n      <td>59.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost  distance  dropoff_latitude  dropoff_longitude  passengers  \\\n0   7.5      0.93         40.714111         -73.946083           1   \n1  11.0      3.08         40.828861         -73.937660           1   \n2   5.5      0.83         40.669552         -73.982773           1   \n3  21.5      6.57         40.710064         -73.955360           2   \n4   8.0      1.66         40.795078         -73.932991           1   \n\n   pickup_latitude  pickup_longitude  store_forward  vendor  pickup_weekday  \\\n0        40.707855        -73.950523          False       2               5   \n1        40.867847        -73.920959          False       2               2   \n2        40.676979        -73.973770          False       2               2   \n3        40.730423        -73.862030          False       2               5   \n4        40.810028        -73.943924          False       2               2   \n\n   ...  pickup_monthday  dropoff_weekday  dropoff_month  dropoff_monthday  \\\n0  ...               13                5              2                13   \n1  ...               17                2              2                17   \n2  ...                3                2              2                 3   \n3  ...               20                5              2                20   \n4  ...               10                2              2                10   \n\n   pickup_hour  pickup_minute  pickup_second  dropoff_hour  dropoff_minute  \\\n0           18             44              3            18              53   \n1            8             24              1             8              32   \n2           17             42             15            17              47   \n3           21              7             44            21              27   \n4           11             19             56            11              28   \n\n   dropoff_second  \n0              10  \n1               5  \n2              33  \n3               3  \n4               0  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n      <th>distance</th>\n      <th>dropoff_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>passengers</th>\n      <th>pickup_latitude</th>\n      <th>pickup_longitude</th>\n      <th>store_forward</th>\n      <th>vendor</th>\n      <th>pickup_weekday</th>\n      <th>...</th>\n      <th>pickup_monthday</th>\n      <th>dropoff_weekday</th>\n      <th>dropoff_month</th>\n      <th>dropoff_monthday</th>\n      <th>pickup_hour</th>\n      <th>pickup_minute</th>\n      <th>pickup_second</th>\n      <th>dropoff_hour</th>\n      <th>dropoff_minute</th>\n      <th>dropoff_second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.5</td>\n      <td>0.93</td>\n      <td>40.714111</td>\n      <td>-73.946083</td>\n      <td>1</td>\n      <td>40.707855</td>\n      <td>-73.950523</td>\n      <td>False</td>\n      <td>2</td>\n      <td>5</td>\n      <td>...</td>\n      <td>13</td>\n      <td>5</td>\n      <td>2</td>\n      <td>13</td>\n      <td>18</td>\n      <td>44</td>\n      <td>3</td>\n      <td>18</td>\n      <td>53</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11.0</td>\n      <td>3.08</td>\n      <td>40.828861</td>\n      <td>-73.937660</td>\n      <td>1</td>\n      <td>40.867847</td>\n      <td>-73.920959</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>17</td>\n      <td>2</td>\n      <td>2</td>\n      <td>17</td>\n      <td>8</td>\n      <td>24</td>\n      <td>1</td>\n      <td>8</td>\n      <td>32</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5.5</td>\n      <td>0.83</td>\n      <td>40.669552</td>\n      <td>-73.982773</td>\n      <td>1</td>\n      <td>40.676979</td>\n      <td>-73.973770</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>42</td>\n      <td>15</td>\n      <td>17</td>\n      <td>47</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21.5</td>\n      <td>6.57</td>\n      <td>40.710064</td>\n      <td>-73.955360</td>\n      <td>2</td>\n      <td>40.730423</td>\n      <td>-73.862030</td>\n      <td>False</td>\n      <td>2</td>\n      <td>5</td>\n      <td>...</td>\n      <td>20</td>\n      <td>5</td>\n      <td>2</td>\n      <td>20</td>\n      <td>21</td>\n      <td>7</td>\n      <td>44</td>\n      <td>21</td>\n      <td>27</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.0</td>\n      <td>1.66</td>\n      <td>40.795078</td>\n      <td>-73.932991</td>\n      <td>1</td>\n      <td>40.810028</td>\n      <td>-73.943924</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>10</td>\n      <td>2</td>\n      <td>2</td>\n      <td>10</td>\n      <td>11</td>\n      <td>19</td>\n      <td>56</td>\n      <td>11</td>\n      <td>28</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 44,
      "metadata": {
        "gather": {
          "logged": 1672693432696
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### View the details of the AutoML run"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.train.automl.run import AutoMLRun\n",
        "#from azureml.widgets import RunDetails\n",
        "\n",
        "# workaround to get the automl run as its the last step in the pipeline \n",
        "# and get_steps() returns the steps from latest to first\n",
        "\n",
        "for step in pipeline_run.get_steps():\n",
        "    automl_step_run_id = step.id\n",
        "    print(step.name)\n",
        "    print(automl_step_run_id)\n",
        "    break\n",
        "\n",
        "automl_run = AutoMLRun(experiment = experiment, run_id=automl_step_run_id)\n",
        "#RunDetails(automl_run).show()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "AutoML_Regression\n33fef505-de95-4b59-8b23-c5792e283e63\n"
        }
      ],
      "execution_count": 45,
      "metadata": {
        "gather": {
          "logged": 1672693433104
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Retreive the best model\n",
        "\n",
        "Uncomment the below cell to retrieve the best model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "best_run, fitted_model = automl_run.get_output()\n",
        "print(best_run)\n",
        "print(fitted_model)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "WARNING:root:The version of the SDK does not match the version the model was trained on.\nWARNING:root:The consistency in the result may not be guaranteed.\nWARNING:root:Package:azureml-automl-core, training version:1.48.0, current version:1.47.0\nPackage:azureml-automl-runtime, training version:1.48.0.post1, current version:1.47.0\nPackage:azureml-core, training version:1.48.0, current version:1.47.0\nPackage:azureml-dataprep, training version:4.8.3, current version:4.5.7\nPackage:azureml-dataprep-rslex, training version:2.15.1, current version:2.11.4\nPackage:azureml-dataset-runtime, training version:1.48.0, current version:1.47.0\nPackage:azureml-defaults, training version:1.48.0, current version:1.47.0\nPackage:azureml-interpret, training version:1.48.0, current version:1.47.0\nPackage:azureml-mlflow, training version:1.48.0, current version:1.47.0\nPackage:azureml-pipeline-core, training version:1.48.0, current version:1.47.0\nPackage:azureml-responsibleai, training version:1.48.0, current version:1.47.0\nPackage:azureml-telemetry, training version:1.48.0, current version:1.47.0\nPackage:azureml-train-automl-client, training version:1.48.0, current version:1.47.0\nPackage:azureml-train-automl-runtime, training version:1.48.0, current version:1.47.0\nPackage:azureml-train-core, training version:1.48.0, current version:1.47.0\nPackage:azureml-train-restclients-hyperdrive, training version:1.48.0, current version:1.47.0\nPackage:azureml-training-tabular, training version:1.48.0, current version:1.47.0\nWARNING:root:Please ensure the version of your local conda dependencies match the version on which your model was trained in order to properly retrieve your model.\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Run(Experiment: NYCTaxi_Tutorial_Pipelines,\nId: 33fef505-de95-4b59-8b23-c5792e283e63_0,\nType: azureml.scriptrun,\nStatus: Completed)\nRegressionPipeline(pipeline=Pipeline(memory=None,\n                                     steps=[('datatransformer',\n                                             DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=True, is_onnx_compatible=False, observer=None, task='regression', working_dir='/mnt/batch/ta...nts/clusters/ds12/code/Users/zacharynguyen.ds92/Azure-ML-Pipelines-Regression-Model-Building')),\n                                            ('MaxAbsScaler',\n                                             MaxAbsScaler(copy=True)),\n                                            ('LightGBMRegressor',\n                                             LightGBMRegressor(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))],\n                                     verbose=False),\n                   stddev=[3.0697868530699206])\n"
        }
      ],
      "execution_count": 50,
      "metadata": {
        "gather": {
          "logged": 1672693498078
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Test the model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Get test data\n",
        "\n",
        "Uncomment the below cell to get test data"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        " split_step = pipeline_run.find_step_run(testTrainSplitStep.name)[0]\n",
        " x_test = fetch_df(split_step, output_split_test.name)[['distance','passengers', 'vendor','pickup_weekday','pickup_hour']]\n",
        " y_test = fetch_df(split_step, output_split_test.name)[['cost']]\n",
        " display(x_test.head(5))\n",
        " display(y_test.head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   distance  passengers  vendor  pickup_weekday  pickup_hour\n0      2.30           3       1               5           17\n1     10.71           2       2               6            1\n2      9.00           3       1               6           23\n3      4.74           1       2               4            6\n4      3.13           1       2               5           18",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>distance</th>\n      <th>passengers</th>\n      <th>vendor</th>\n      <th>pickup_weekday</th>\n      <th>pickup_hour</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.30</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.71</td>\n      <td>2</td>\n      <td>2</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9.00</td>\n      <td>3</td>\n      <td>1</td>\n      <td>6</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.74</td>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.13</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   cost\n0 10.50\n1 30.50\n2 27.50\n3 15.50\n4 12.50",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10.50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>30.50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>27.50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15.50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12.50</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 51,
      "metadata": {
        "gather": {
          "logged": 1672693528503
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Test the best fitted model\n",
        "\n",
        "Uncomment the below cell to test the best fitted model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        " y_predict = fitted_model.predict(x_test)\n",
        " y_actual =  y_test.values.tolist()\n",
        " display(pd.DataFrame({'Actual':y_actual, 'Predicted':y_predict}).head(5))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   Actual  Predicted\n0  [10.5]      11.83\n1  [30.5]      30.97\n2  [27.5]      29.56\n3  [15.5]      18.02\n4  [12.5]      13.90",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Actual</th>\n      <th>Predicted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>[10.5]</td>\n      <td>11.83</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[30.5]</td>\n      <td>30.97</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[27.5]</td>\n      <td>29.56</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>[15.5]</td>\n      <td>18.02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>[12.5]</td>\n      <td>13.90</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 52,
      "metadata": {
        "gather": {
          "logged": 1672693541941
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        " import matplotlib.pyplot as plt\n",
        " fig = plt.figure(figsize=(14, 10))\n",
        " ax1 = fig.add_subplot(111)\n",
        " distance_vals = [x[0] for x in x_test.values]\n",
        " ax1.scatter(distance_vals[:100], y_predict[:100], s=18, c='b', marker=\"s\", label='Predicted')\n",
        " ax1.scatter(distance_vals[:100], y_actual[:100], s=18, c='r', marker=\"o\", label='Actual')\n",
        " ax1.set_xlabel('distance (mi)')\n",
        " ax1.set_title('Predicted and Actual Cost/Distance')\n",
        " ax1.set_ylabel('Cost ($)')\n",
        " plt.legend(loc='upper left', prop={'size': 12})\n",
        " plt.rcParams.update({'font.size': 14})\n",
        " plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1400x1000 with 1 Axes>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABH8AAANXCAYAAACsc/NXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nOzde5yWdZ038M8AI4zDDBiOgEGcAo+rJrZqnk0lAXs8i4dH8RSlqWi2u6kroqRlKph5yDL1UczWA5WHdLXQNA+5qburaY4EngjElAEFROB6/phllpFBQYGBi/f79bpft/fvd93X9b3vueal8/F3qCiKoggAAAAApdSmtQsAAAAAYNUR/gAAAACUmPAHAAAAoMSEPwAAAAAlJvwBAAAAKDHhDwAAAECJCX8AAAAASkz4AwAAAFBiwh8AAACAEhP+AAAAAJSY8AcA1jC9e/fO8OHDm14/9NBDqaioyEMPPdRqNX3Yh2tsbeedd14qKipau4xVak28D1pDRUVFzjvvvNYuAwDWKsIfAFjCDTfckIqKiqZHhw4dMmDAgHzzm9/M9OnTW7u8FXLvvff6I/kjHHrooamoqMg///M/f+JzPPbYYznvvPMyc+bMlVjZyjFp0qSMGDEiffv2TYcOHVJbW5uddtopl19+eebOnbvSrzdnzpycd955HxlOvfPOO2nXrl3+7d/+LUljiLj4d61Nmzbp3Llz/uEf/iFf+9rX8uSTT6602m655ZaMGzdupZ0PANY27Vq7AABYE51//vnp06dP5s2bl0cffTRXX3117r333jz33HNZf/31V2stu+66a+bOnZv11ltvhd5377335sorrxQAtWDWrFm566670rt37/z85z/P9773vU80cuixxx7L6NGjM3z48HTu3HkVVPrJ3HPPPTnkkEPSvn37HH300dlyyy0zf/78PProo/n2t7+d559/Ptdee+1KveacOXMyevToJMnuu+/e4jH3339/Kioqss8++zS1bbPNNvnWt76VJJk9e3ZeeOGF3HbbbfnJT36S008/PZdddlmzc8ydOzft2q3Yf8Lecsstee655zJy5MgVeh8AlIXwBwBasO+++2a77bZLkpxwwgnp0qVLLrvssvzqV7/K4Ycf3uJ73nvvvVRXV6/0Wtq0aZMOHTqs9POuy+64444sXLgwP/vZz7Lnnnvm97//fXbbbbfWLmulmDx5coYNG5ZevXrld7/7Xbp3797Ud/LJJ+fll1/OPffc0yq13Xvvvdlpp52aBWWf/exnc9RRRzU77vvf/36OOOKIjB07Nv379883vvGNpj6/CwCw4kz7AoDlsOeeeyZp/MM6SYYPH56OHTtm0qRJGTx4cGpqanLkkUcmSRYtWpRx48Zliy22SIcOHdK1a9eMGDEi77zzTrNzFkWRMWPGpEePHll//fWzxx575Pnnn1/q2sta6+XJJ5/M4MGDs8EGG6S6ujpbbbVVLr/88qb6rrzyyiRpNo1tsZVd47Jccskl+dKXvpQuXbqkqqoqAwcOzO23377UcRUVFfnmN7+ZX/7yl9lyyy3Tvn37bLHFFrnvvvuWOvbRRx/NF7/4xXTo0CH9+vXLj3/84+WuZ7Hx48dn7733zh577JHNNtss48ePb/G4F198MYceemjq6upSVVWVTTbZJGeffXaSxnWGvv3tbydJ+vTp0/QdT5kyJVOmTElFRUVuuOGGFj/rkqOxXnnllZx00knZZJNNUlVVlS5duuSQQw7JlClTVvhzJcnFF1+cd999N9ddd12z4Gexz3/+8znttNOaXi9YsCAXXHBB+vXrl/bt26d3794566yz8v777zd733/8x39k0KBB2XDDDVNVVZU+ffrkuOOOS5JMmTIldXV1SZLRo0c3fRdLfs5Fixblvvvuy5AhQz72M1RVVeWmm27KZz7zmXz3u99NURRNfR8+7+zZszNy5Mj07t077du3z0YbbZS99947Tz/9dJLGUUj33HNPXnnllaa6evfunSSZP39+zj333AwcODCdOnVKdXV1dtlll0ycOLFZPYt/npdcckmuvfbapu/qi1/8Yp566qml6v+o+2axN954I8cdd1y6du3adL//7Gc/+9jvBgA+CSN/AGA5TJo0KUnSpUuXprYFCxZk0KBB2XnnnXPJJZc0TQcbMWJEbrjhhhx77LE59dRTM3ny5PzoRz/KM888kz/84Q+prKxMkpx77rkZM2ZMBg8enMGDB+fpp5/OPvvsk/nz539sPQ888ECGDh2a7t2757TTTku3bt3ywgsv5O67785pp52WESNGZOrUqXnggQdy0003LfX+1VFjklx++eX56le/miOPPDLz58/PrbfemkMOOSR33333UiHAo48+mjvvvDMnnXRSampq8sMf/jAHHXRQXn311abv/b//+7+zzz77pK6uLuedd14WLFiQUaNGpWvXrstVT5JMnTo1EydOzI033pgkOfzwwzN27Nj86Ec/aja17r/+67+yyy67pLKyMl/72tfSu3fvTJo0KXfddVe++93v5sADD8xLL72Un//85xk7dmw23HDDJEldXV1mzJix3PU89dRTeeyxxzJs2LD06NEjU6ZMydVXX53dd989f/7zn1d4muFdd92Vvn375ktf+tJyHX/CCSfkxhtvzMEHH5xvfetbefLJJ3PRRRflhRdeyIQJE5Ikb775ZtP3/i//8i/p3LlzpkyZkjvvvLPpM1999dX5xje+kQMOOCAHHnhgkmSrrbZq9jlnzJiRwYMHL1ddHTt2zAEHHJDrrrsuf/7zn7PFFlu0eNzXv/713H777fnmN7+ZzTffPH//+9/z6KOP5oUXXsi2226bs88+Ow0NDXn99dczduzYpnMnjdP/fvrTn+bwww/PiSeemNmzZ+e6667LoEGD8sc//jHbbLNNs2vdcsstmT17dkaMGJGKiopcfPHFOfDAA/PXv/616Xfm4+6bJJk+fXp22GGHptCzrq4uv/nNb3L88cdn1qxZpqcBsPIVAECT66+/vkhSPPjgg8WMGTOK1157rbj11luLLl26FFVVVcXrr79eFEVRHHPMMUWS4l/+5V+avf+RRx4pkhTjx49v1n7fffc1a3/zzTeL9dZbrxgyZEixaNGipuPOOuusIklxzDHHNLVNnDixSFJMnDixKIqiWLBgQdGnT5+iV69exTvvvNPsOkue6+STTy5a+lf9qqhxWebMmdPs9fz584stt9yy2HPPPZu1JynWW2+94uWXX25q+8///M8iSXHFFVc0te2///5Fhw4dildeeaWp7c9//nPRtm3bFj9rSy655JKiqqqqmDVrVlEURfHSSy8VSYoJEyY0O27XXXctampqml2rKJp/xz/4wQ+KJMXkyZObHTN58uQiSXH99dcvdf0kxahRo5pef/g7KoqiePzxx4skxf/7f/+vqe3D90FLGhoaiiTF//k//2eZxyzp2WefLZIUJ5xwQrP2M888s0hS/O53vyuKoigmTJhQJCmeeuqpZZ5rxowZS322Jf3rv/5r0atXr2ZtvXr1KoYMGbLMc44dO7ZIUvzqV79qavvwNTp16lScfPLJyzxHURTFkCFDlrp2UTT+Lr3//vvN2t55552ia9euxXHHHdfUtvjn2aVLl+Ltt99uav/Vr35VJCnuuuuuprbluW+OP/74onv37sVbb73V7Jhhw4YVnTp1avGeAIBPw7QvAGjBXnvtlbq6uvTs2TPDhg1Lx44dM2HChHz2s59tdtySa5EkyW233ZZOnTpl7733zltvvdX0GDhwYDp27Ng0neTBBx/M/Pnzc8oppzSbjrU8/8f/mWeeyeTJkzNy5MilFhlenkWLV0eNi1VVVTX98zvvvJOGhobssssuTVNylrTXXnulX79+Ta+32mqr1NbW5q9//WuSZOHChbn//vuz//7753Of+1zTcZtttlkGDRq03DWNHz8+Q4YMSU1NTZKkf//+GThwYLOpXzNmzMjvf//7HHfccc2ulSzfd7wilvyOPvjgg/z973/P5z//+XTu3LnF7+mjzJo1K0maPtvHuffee5MkZ5xxRrP2xQswL14baPF9dvfdd+eDDz5YoZqWvNbyTPla0uIROrNnz17mMZ07d86TTz6ZqVOnrnBNbdu2bRrttWjRorz99ttZsGBBtttuuxa/+8MOOywbbLBB0+tddtklSZru0eW5b4qiyB133JH99tsvRVE0+x0cNGhQGhoaVvjnDgAfx7QvAGjBlVdemQEDBqRdu3bp2rVrNtlkk7Rp0/z/mbRr1y49evRo1lZfX5+GhoZstNFGLZ73zTffTNK4zkvSGDwsqa6urtkfly1ZPAVtyy23XP4PtJprXOzuu+/OmDFj8uyzzzZbQ6alAOXDfywnyQYbbNC0DtGMGTMyd+7cpepJkk022aQpyPgoL7zwQp555pkcffTRefnll5vad99991x55ZWZNWtWs8Dpk37HK2Lu3Lm56KKLcv311+eNN95otr5NQ0PDCp2rtrY2yUeHJUt65ZVX0qZNm3z+859v1t6tW7d07ty56R7YbbfdctBBB2X06NEZO3Zsdt999+y///454ogj0r59+4+9zrRp0/L000/n/PPPX6HP8+677yb56DDr4osvzjHHHJOePXtm4MCBGTx4cI4++uj07dt3ua5x44035tJLL82LL77YLNjq06fPUsd++B5d/Huw+B5dnvtmxowZmTlzZq699tpl7ri2+HcQAFYW4Q8AtOAf//Efm3b7Wpb27dsvFQgtWrQoG2200TIXEF68KG5rWl01PvLII/nqV7+aXXfdNVdddVW6d++eysrKXH/99bnllluWOr5t27YtnmfJMOTTuvnmm5Mkp59+ek4//fSl+u+4444ce+yxn/o6yxodtHDhwqXaTjnllFx//fUZOXJkdtxxx3Tq1CkVFRUZNmxYFi1atELXra2tzcYbb5znnntupdS7ZP/tt9+eJ554InfddVfuv//+HHfccbn00kvzxBNPNI3QWZbf/OY36dChQ/bYY48Vqmvx5/hwOLWkQw89NLvssksmTJiQf//3f88PfvCDfP/738+dd96Zfffd9yPPf/PNN2f48OHZf//98+1vfzsbbbRR2rZtm4suuqgpZF3SyrhHF/9MjzrqqBxzzDEtHrPkWkkAsDIIfwBgJerXr18efPDB7LTTTs2m83xYr169kjSOwllyhMKMGTOW2nGrpWskjX8Y77XXXss8bll/0K+OGpPGIKVDhw65//77m40Ouf766z/2vS1ZvHNSfX39Un1/+ctfPvb9RVHklltuyR577JGTTjppqf4LLrgg48ePz7HHHtv0eT8uRFnWd7x4RMjMmTObtS8eSbOk22+/Pcccc0wuvfTSprZ58+Yt9d7lNXTo0Fx77bV5/PHHs+OOO37ksb169cqiRYtSX1+fzTbbrKl9+vTpmTlzZtM9sNgOO+yQHXbYId/97ndzyy235Mgjj8ytt96aE0444SMDpHvuuSd77LHHR95vH/buu+9mwoQJ6dmzZ7PaWtK9e/ecdNJJOemkk/Lmm29m2223zXe/+92m8GdZtd1+++3p27dv7rzzzmbHjBo1arnrXNLy3Dd1dXWpqanJwoULP/L3FwBWJmv+AMBKdOihh2bhwoW54IILlupbsGBB0x/0e+21VyorK3PFFVc0GzUwbty4j73Gtttumz59+mTcuHFLBQRLnqu6ujrJ0gHE6qgxaRwlUVFR0Wy0y5QpU/LLX/5yud7f0vkGDRqUX/7yl3n11Veb2l944YXcf//9H/v+P/zhD5kyZUqOPfbYHHzwwUs9DjvssEycODFTp05NXV1ddt111/zsZz9rdq1k+b7j2trabLjhhvn973/frP2qq65q8XN9eOTIFVdc0eIooeXxT//0T6murs4JJ5yQ6dOnL9U/adKkXH755UnStPPWh3+ml112WZI0rdHzzjvvLFXj4p2wFk/nW7wr2Ye/iw8++CAPPPDACq33M3fu3Pzf//t/8/bbb+fss8/+yJFUH54at9FGG2XjjTduNs2wurq6xSl0i0fyLPnZnnzyyTz++OPLXeuSlue+adu2bQ466KDccccdLYZEK7JTHAAsLyN/AGAl2m233TJixIhcdNFFefbZZ7PPPvuksrIy9fX1ue2223L55Zfn4IMPTl1dXc4888xcdNFFGTp0aAYPHpxnnnkmv/nNb5q2DF+WNm3a5Oqrr85+++2XbbbZJscee2y6d++eF198Mc8//3xTEDJw4MAkyamnnppBgwalbdu2GTZs2GqpMWkMDi677LJ85StfyRFHHJE333wzV155ZT7/+c/nv/7rvz7R9zt69Ojcd9992WWXXXLSSSdlwYIFueKKK7LFFlt87DnHjx+ftm3bLjOE+OpXv5qzzz47t956a84444z88Ic/zM4775xtt902X/va19KnT59MmTIl99xzT5599tkk//sdn3322Rk2bFgqKyuz3377NYUv3/ve93LCCSdku+22y+9///u89NJLS1136NChuemmm9KpU6dsvvnmefzxx/Pggw82bW+/ovr165dbbrklhx12WDbbbLMcffTR2XLLLTN//vw89thjue222zJ8+PAkydZbb51jjjkm1157bWbOnJnddtstf/zjH3PjjTdm//33b5qmdeONN+aqq67KAQcckH79+mX27Nn5yU9+ktra2qYAqaqqKptvvnl+8YtfZMCAAfnMZz6TLbfcMjNmzMisWbOW+b2/8cYbTdPx3n333fz5z3/ObbfdlmnTpuVb3/pWRowYsczPOnv27PTo0SMHH3xwtt5663Ts2DEPPvhgnnrqqWYjqQYOHJhf/OIXOeOMM/LFL34xHTt2zH777ZehQ4fmzjvvzAEHHJAhQ4Zk8uTJueaaa7L55ps3rTe0opbnvvne976XiRMnZvvtt8+JJ56YzTffPG+//XaefvrpPPjgg3n77bc/0bUBYJlaY4sxAFhTLd7q/aO2tC6Kxq3eq6url9l/7bXXFgMHDiyqqqqKmpqa4h/+4R+Kf/qnfyqmTp3adMzChQuL0aNHF927dy+qqqqK3XffvXjuueeKXr16feRW74s9+uijxd57713U1NQU1dXVxVZbbdVsW/QFCxYUp5xySlFXV1dUVFQstRX6yqxxWa677rqif//+Rfv27YtNN920uP7664tRo0YtVUuSFrfrbuk6Dz/8cDFw4MBivfXWK/r27Vtcc801LZ5zSfPnzy+6dOlS7LLLLh9Zb58+fYovfOELTa+fe+654oADDig6d+5cdOjQodhkk02Kf/3Xf232ngsuuKD47Gc/W7Rp06bZtu9z5swpjj/++KJTp05FTU1NceihhxZvvvnmUluVv/POO8Wxxx5bbLjhhkXHjh2LQYMGFS+++OJy3wfL8tJLLxUnnnhi0bt372K99dYrampqip122qm44oorinnz5jUd98EHHxSjR48u+vTpU1RWVhY9e/YsvvOd7zQ75umnny4OP/zw4nOf+1zRvn37YqONNiqGDh1a/Md//Eezaz722GNNP5vFn/PMM88sNt988xZr7NWrV5GkSFJUVFQUtbW1xRZbbFGceOKJxZNPPtnie5b8/t5///3i29/+drH11ls3/R5svfXWxVVXXdXsPe+++25xxBFHFJ07dy6SNG37vmjRouLCCy8sevXqVbRv3774whe+UNx9993FMccc02xr+MVbvf/gBz/4yHoWW577Zvr06cXJJ59c9OzZs6isrCy6detWfPnLXy6uvfbaFj83AHwaFUWxEldRBACAJWy++eYZOnRoLr744tYuBQDWWaZ9AQCwSsyfPz+HHXZYDj300NYuBQDWaUb+AAAAAJSY3b4AAAAASkz4AwAAAFBiwh8AAACAEiv9gs+LFi3K1KlTU1NTk4qKitYuBwAAAGClKIois2fPzsYbb5w2bZY9vqf04c/UqVPTs2fP1i4DAAAAYJV47bXX0qNHj2X2lz78qampSdL4RdTW1rZyNQAAAAArx6xZs9KzZ8+m7GNZSh/+LJ7qVVtbK/wBAAAASufjlrmx4DMAAABAiQl/AAAAAEpM+AMAAABQYsIfAAAAgBIr/YLPK6IoiixcuDALFixo7VJYg1RWVqZt27atXQYAAAB8IsKfNIY+M2fOzIwZM7Jw4cLWLoc1UOfOndOtW7ePXUEdAAAA1jTCnyTTpk3LzJkzm7aDb9eunT/ySdIYDM6ZMydvvvlmkqR79+6tXBEAAACsmHU+/Fm4cGEaGhpSV1eXDTfcsLXLYQ1UVVWVJHnzzTez0UYbmQIGAADAWmWdX/D5gw8+SFEUqa6ubu1SWIOtv/76SRrvFwAAAFibrPPhz2KmefFR3B8AAACsrYQ/AAAAACUm/AEAAAAoMeEPq1Tv3r0zfPjwptcPPfRQKioq8tBDD7VaTR/24RoBAACgTIQ/JXfDDTekoqKi6dGhQ4cMGDAg3/zmNzN9+vTWLm+53XvvvTnvvPNauwwAAABY66zzW72vK84///z06dMn8+bNy6OPPpqrr7469957b5577rmmnaxWh1133TVz587Neuutt0Lvu/fee3PllVcKgAAAAGAFCX/WEfvuu2+22267JMkJJ5yQLl265LLLLsuvfvWrHH744Usd/95776W6unql19GmTZt06NBhpZ8XAAAAaJlpX+uoPffcM0kyefLkDB8+PB07dsykSZMyePDg1NTU5Mgjj0ySLFq0KOPGjcsWW2yRDh06pGvXrhkxYkTeeeedZucriiJjxoxJjx49sv7662ePPfbI888/v9R1l7Xmz5NPPpnBgwdngw02SHV1dbbaaqtcfvnlSZLhw4fnyiuvTJJmU9gWW9k1AgAAQJkY+bOK1Ncns2cv3V5Tk/Tvv/rr+bBJkyYlSbp06ZIkWbBgQQYNGpSdd945l1xySdNUsBEjRuSGG27Isccem1NPPTWTJ0/Oj370ozzzzDP5wx/+kMrKyiTJueeemzFjxmTw4MEZPHhwnn766eyzzz6ZP3/+x9bywAMPZOjQoenevXtOO+20dOvWLS+88ELuvvvunHbaaRkxYkSmTp2aBx54IDfddNNS718dNQIAAMDaSvizCtTXJwMGLLv/pZdWfwDU0NCQt956K/Pmzcsf/vCHnH/++amqqsrQoUPz+OOP5/33388hhxySiy66qOk9jz76aH76059m/PjxOeKII5ra99hjj3zlK1/JbbfdliOOOCIzZszIxRdfnCFDhuSuu+5qGpVz9tln58ILL/zIuhYuXJgRI0ake/fuefbZZ9O5c+emvqIokiQ77rhjBgwYkAceeCBHHXVUs/evjhoBAABgbWba1yrQ0oifFelfFfbaa6/U1dWlZ8+eGTZsWDp27JgJEybks5/9bNMx3/jGN5q957bbbkunTp2y995756233mp6DBw4MB07dszEiROTJA8++GDmz5+fU045pdl0rJEjR35sXc8880wmT56ckSNHNgt+kjQ717KsjhoBAABgbWbkzzriyiuvzIABA9KuXbt07do1m2yySdq0+d/sr127dunRo0ez99TX16ehoSEbbbRRi+d88803kySvvPJKkqT/h4Yz1dXVZYMNNvjIuhZPP9tyyy1X7AOtxhoBAABgbSb8WUf84z/+Y9NuXy1p3759szAoaVxIeaONNsr48eNbfE9dXd1KrfGTWBtqBAAAgNYk/GGZ+vXrlwcffDA77bRTqqqqlnlcr169kjSOwunbt29T+4wZM5bacaulayTJc889l7322muZxy1rCtjqqBEAAADWZtb8YZkOPfTQLFy4MBdccMFSfQsWLMjMmTOTNK4nVFlZmSuuuKJpkeYkGTdu3MdeY9ttt02fPn0ybty4pvMttuS5qqurk2SpY1ZHjQAAALA2M/JnFaip+XT9a4rddtstI0aMyEUXXZRnn302++yzTyorK1NfX5/bbrstl19+eQ4++ODU1dXlzDPPzEUXXZShQ4dm8ODBeeaZZ/Kb3/wmG2644Udeo02bNrn66quz3377ZZtttsmxxx6b7t2758UXX8zzzz+f+++/P0kycODAJMmpp56aQYMGpW3bthk2bNhqqREAAADWZsKfVaB//8bt3Fva1aumZvVv8/5pXHPNNRk4cGB+/OMf56yzzkq7du3Su3fvHHXUUdlpp52ajhszZkw6dOiQa665JhMnTsz222+ff//3f8+QIUM+9hqDBg3KxIkTM3r06Fx66aVZtGhR+vXrlxNPPLHpmAMPPDCnnHJKbr311tx8880piiLDhg1bbTUCAADA2qqiWHIOTAnNmjUrnTp1SkNDQ2pra5fqnzdvXiZPnpw+ffqkQ4cOrVAhawP3CQAAAGuaj8s8FrPmDwAAAECJmfYFAAAArDPq68uxTMuKEP4AAAAA64T6+mTAgGX3v/RSOQMg074AAACAdUJLI35WpH9tJfwBAAAAKDHhDwAAAECJCX8AAAAASkz4AwAAAFBiwh8AAABgnVBT8+n611a2egcAAADWCf37N27n3tKuXjU15dzmPRH+AAAAAOuQsgY8H8W0LwAAAIASE/6wxqqoqMh5553X2mUAAADAWk34sw656qqrUlFRke233/4TvX/q1Kk577zz8uyzz67kygAAAIBVRfizDhk/fnx69+6dP/7xj3n55ZdX+P1Tp07N6NGjhT8AAACwFhH+rCMmT56cxx57LJdddlnq6uoyfvz41i4JAAAAWA2EP+uI8ePHZ4MNNsiQIUNy8MEHtxj+zJw5M6effnp69+6d9u3bp0ePHjn66KPz1ltv5aGHHsoXv/jFJMmxxx6bioqKVFRU5IYbbkiS9O7dO8OHD1/qnLvvvnt23333ptfz58/Pueeem4EDB6ZTp06prq7OLrvskokTJ66Kjw0AAADrPOHPqjZ3bjJ5cuNzKxo/fnwOPPDArLfeejn88MNTX1+fp556qqn/3XffzS677JIrrrgi++yzTy6//PJ8/etfz4svvpjXX389m222Wc4///wkyde+9rXcdNNNuemmm7LrrruuUB2zZs3KT3/60+y+++75/ve/n/POOy8zZszIoEGDTCcDAACAVaBdaxdQWgsXJqNGJWPHJnPmJOuvn5x+ejJ6dNK27Wot5U9/+h7Hst8AACAASURBVFNefPHFXHHFFUmSnXfeOT169Mj48eObRvP84Ac/yHPPPZc777wzBxxwQNN7zznnnBRFkYqKiuy7774599xzs+OOO+aoo476RLVssMEGmTJlStZbb72mthNPPDGbbrpprrjiilx33XWf4pMCAAAAH2bkz6oyalRy4YWNwU/S+HzhhY3tq9n48ePTtWvX7LHHHkkat1A/7LDDcuutt2bhwoVJkjvuuCNbb711s+BnsYqKipVWS9u2bZuCn0WLFuXtt9/OggULst122+Xpp59eadcBAAAAGgl/VoW5cxtH/BRF8/aiSMaNW61TwBYuXJhbb701e+yxRyZPnpyXX345L7/8crbffvtMnz49v/3tb5MkkyZNypZbbrlaarrxxhuz1VZbpUOHDunSpUvq6upyzz33pKGhYbVcHwAAANYlwp9VYdq0/x3x82HvvdfYv5r87ne/y9/+9rfceuut6d+/f9Pj0EMPTZKVtuvXskYHLR5ZtNjNN9+c4cOHp1+/frnuuuty33335YEHHsiee+6ZRYsWrZRaAAAAgP9lzZ9VoVu3xjV+WgqAqqsb+1eT8ePHZ6ONNsqVV165VN+dd96ZCRMm5Jprrkm/fv3y3HPPfeS5Pmr61wYbbJCZM2cu1f7KK6+kb9++Ta9vv/329O3bN3feeWez841qhelwAAAAsC4Q/qwKVVWNiztfeGHzqV8VFcnIkY39q8HcuXNz55135pBDDsnBBx+8VP/GG2+cn//85/n1r3+dgw46KOeff34mTJiw1Lo/ixd8rq6uTpIWQ55+/frlkUceyfz585vW9Ln77rvz2muvNQt/2v7PYteLz5kkTz75ZB5//PF87nOfWzkfHAAAAGgi/FlV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NWzZsoXNmzdz9dVXc+TIkTLNWJLqQBDAyEh4XMl4paiWeUqSJEklVtbiz/33388111zDww8/zL/+679y6tQpXvva1zIxMTF7TU9PD//4j//I3Xffzf33389Pf/pT3vSmN5Vx1pJUo6anIZGA9nbYvj08JhLh+ULGK0W1zFOSJElaJ5F0Op0u9yQyRkdHOfvss7n//vt55StfydjYGGeddRZ33XUXf/AHfwDA448/zo4dO3jooYd4xStesew9x8fHaWtrY2xsjNbW1lJ/BEmqXokEDA7C/P9ZiESgtxcGBpYfrxTVMk9JkiRplQqteVRUz5+xsTEAzjzzTAD279/PqVOnuPzyy2evedGLXsR5553HQw89lPMeJ0+eZHx8POtHkrSMIIChoeyCCYSvh4fhmWeWHq+UrVXLfY5KmackSZK0jiqm+DMzM0N3dzeXXnopF110EQCpVIpNmzZx+umnZ127detWUqlUzvvccssttLW1zf5s27at5HOXpKqXSsHkZO6xiQl47LGlx/P8d/K6W+5zVMo8JUmSpHVUMcWfa665hscee4wvfvGLq7rPnj17GBsbm/156qmn1miGklTD4nFobs49FovBRRctPR6Pl25uxVjuc1TKPCVJkqR1VBHFn2uvvZavfvWrfOtb3+Lcc8+dPR+Px3n22Wc5duxY1vVHjhwhnucf4E877TRaW1uzfiRJy4hGoacn7I0zXyQC3d1w5plLj0ej6zfXpSz3OSplnpIkSdI62lDOh6fTaa677jruvfdevv3tb9PR0ZE1vmvXLjZu3Mg3vvENrr76agB++MMf8uSTT7J79+5yTFmSald/f3gcHg63SMViYcEkc3658VILAkYeSnGsKU66KbuI09ICnZ0Ffg5JkiSpzpQ17et973sfd911F1/+8pd54QtfOHu+ra2N6HP/7+x73/tevva1r3HHHXfQ2trKddddB8CDDz5Y0DNM+5KkIgVB2BsnHs+9Uma58bU2PQ19fcx8YoiGYJIJmhmihz76maFx9rJDh+YVgMoxT0mSJGmdFVrzKGvxJ7JwWf5zPve5z/GOd7wDgKmpKT7wgQ/whS98gZMnT3LFFVdw22235d32tZDFH0nKlkzC8eOLz2etnqkkOaLbZ4gwSC/7mItu378fdu4sxwQlSZKk8qiK4s96sPgjSXOSSejqyj++aPVMuQUBM1va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\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 53,
      "metadata": {
        "gather": {
          "logged": 1672693556056
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "authors": [
      {
        "name": "anshirga"
      }
    ],
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}